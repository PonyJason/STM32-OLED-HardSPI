
oledHardSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007458  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078bc  080078bc  00022074  2**0
                  CONTENTS
  4 .ARM          00000008  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c4  080078c4  00022074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002074  20000000  080078cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b74  20002074  08009940  00022074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006be8  08009940  00026be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e57b  00000000  00000000  000220a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ae7  00000000  00000000  0004061f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  00045108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  00046dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d41a  00000000  00000000  000488a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002077f  00000000  00000000  00065cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa68c  00000000  00000000  00086441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bdc  00000000  00000000  00130b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20002074 	.word	0x20002074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075e0 	.word	0x080075e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002078 	.word	0x20002078
 80001dc:	080075e0 	.word	0x080075e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	619a      	str	r2, [r3, #24]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	041a      	lsls	r2, r3, #16
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	619a      	str	r2, [r3, #24]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <OLED_WR_Byte>:
//mode0表示串行模式
//��SSD1106д��һ���ֽڡ�
//dat:Ҫд�������/����
//cmd:����/�����־ 0,��ʾ����;1,��ʾ����;
void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	uint8_t* data = &dat;
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	60fb      	str	r3, [r7, #12]
	//uint8_t i;
	if(cmd)
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d005      	beq.n	8000546 <OLED_WR_Byte+0x26>
	  OLED_DC_Set();
 800053a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053e:	4810      	ldr	r0, [pc, #64]	; (8000580 <OLED_WR_Byte+0x60>)
 8000540:	f7ff ffd0 	bl	80004e4 <LL_GPIO_SetOutputPin>
 8000544:	e004      	b.n	8000550 <OLED_WR_Byte+0x30>
	else 
	  OLED_DC_Clr();		  
 8000546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <OLED_WR_Byte+0x60>)
 800054c:	f7ff ffd8 	bl	8000500 <LL_GPIO_ResetOutputPin>
	OLED_CS_Clr();
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	480b      	ldr	r0, [pc, #44]	; (8000580 <OLED_WR_Byte+0x60>)
 8000554:	f7ff ffd4 	bl	8000500 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)data, 1, 1000);
 8000558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055c:	2201      	movs	r2, #1
 800055e:	68f9      	ldr	r1, [r7, #12]
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <OLED_WR_Byte+0x64>)
 8000562:	f002 f870 	bl	8002646 <HAL_SPI_Transmit>
//		else
//		   OLED_SDIN_Clr();
//		OLED_SCLK_Set(); //sample at the rising-edge, that is to say, the second edge for high-free-state
//		dat<<=1;
//	}
	OLED_CS_Set();
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <OLED_WR_Byte+0x60>)
 800056a:	f7ff ffbb 	bl	80004e4 <LL_GPIO_SetOutputPin>
	OLED_DC_Set();   	  
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <OLED_WR_Byte+0x60>)
 8000574:	f7ff ffb6 	bl	80004e4 <LL_GPIO_SetOutputPin>
} 
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40020400 	.word	0x40020400
 8000584:	200020fc 	.word	0x200020fc

08000588 <OLED_Set_Pos>:
#endif
	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	3b50      	subs	r3, #80	; 0x50
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffbd 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	091b      	lsrs	r3, r3, #4
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffb3 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	f003 030e 	and.w	r3, r3, #14
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffa6 	bl	8000520 <OLED_WR_Byte>
}   	  
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)  
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	e01f      	b.n	8000628 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3b50      	subs	r3, #80	; 0x50
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff95 	bl	8000520 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 80005f6:	2100      	movs	r1, #0
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ff91 	bl	8000520 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 80005fe:	2100      	movs	r1, #0
 8000600:	2010      	movs	r0, #16
 8000602:	f7ff ff8d 	bl	8000520 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8000606:	2300      	movs	r3, #0
 8000608:	71bb      	strb	r3, [r7, #6]
 800060a:	e006      	b.n	800061a <OLED_Clear+0x3e>
 800060c:	2101      	movs	r1, #1
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ff86 	bl	8000520 <OLED_WR_Byte>
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	3301      	adds	r3, #1
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800061e:	2b00      	cmp	r3, #0
 8000620:	daf4      	bge.n	800060c <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	3301      	adds	r3, #1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b07      	cmp	r3, #7
 800062c:	d9dc      	bls.n	80005e8 <OLED_Clear+0xc>
	} //������ʾ
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <OLED_DrawBMP>:
				adder+=1;
      }					
}
/***********������������ʾ��ʾBMPͼƬ128��64��ʼ������(x,y),x�ķ�Χ0��127��yΪҳ�ķ�Χ0��7*****************/
void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{ 	
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	4604      	mov	r4, r0
 8000640:	4608      	mov	r0, r1
 8000642:	4611      	mov	r1, r2
 8000644:	461a      	mov	r2, r3
 8000646:	4623      	mov	r3, r4
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	4603      	mov	r3, r0
 800064c:	71bb      	strb	r3, [r7, #6]
 800064e:	460b      	mov	r3, r1
 8000650:	717b      	strb	r3, [r7, #5]
 8000652:	4613      	mov	r3, r2
 8000654:	713b      	strb	r3, [r7, #4]
 unsigned int j=0;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 unsigned char x,y;
  
  if(y1%8==0) y=y1/8;      
 800065a:	793b      	ldrb	r3, [r7, #4]
 800065c:	f003 0307 	and.w	r3, r3, #7
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d103      	bne.n	800066e <OLED_DrawBMP+0x36>
 8000666:	793b      	ldrb	r3, [r7, #4]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	72bb      	strb	r3, [r7, #10]
 800066c:	e004      	b.n	8000678 <OLED_DrawBMP+0x40>
  else y=y1/8+1;
 800066e:	793b      	ldrb	r3, [r7, #4]
 8000670:	08db      	lsrs	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	3301      	adds	r3, #1
 8000676:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	72bb      	strb	r3, [r7, #10]
 800067c:	e01c      	b.n	80006b8 <OLED_DrawBMP+0x80>
	{
		OLED_Set_Pos(x0,y);
 800067e:	7aba      	ldrb	r2, [r7, #10]
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff7f 	bl	8000588 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	72fb      	strb	r3, [r7, #11]
 800068e:	e00c      	b.n	80006aa <OLED_DrawBMP+0x72>
	    {      
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);	    	
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60fa      	str	r2, [r7, #12]
 8000696:	6a3a      	ldr	r2, [r7, #32]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff3e 	bl	8000520 <OLED_WR_Byte>
    for(x=x0;x<x1;x++)
 80006a4:	7afb      	ldrb	r3, [r7, #11]
 80006a6:	3301      	adds	r3, #1
 80006a8:	72fb      	strb	r3, [r7, #11]
 80006aa:	7afa      	ldrb	r2, [r7, #11]
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3ee      	bcc.n	8000690 <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 80006b2:	7abb      	ldrb	r3, [r7, #10]
 80006b4:	3301      	adds	r3, #1
 80006b6:	72bb      	strb	r3, [r7, #10]
 80006b8:	7aba      	ldrb	r2, [r7, #10]
 80006ba:	793b      	ldrb	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3de      	bcc.n	800067e <OLED_DrawBMP+0x46>
	    }
	}
} 
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd90      	pop	{r4, r7, pc}
	...

080006cc <OLED_Init>:


//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
//
//
// #endif
//

	OLED_CS_Clr();
 80006d0:	2140      	movs	r1, #64	; 0x40
 80006d2:	484b      	ldr	r0, [pc, #300]	; (8000800 <OLED_Init+0x134>)
 80006d4:	f7ff ff14 	bl	8000500 <LL_GPIO_ResetOutputPin>
    OLED_RST_Clr();
 80006d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006dc:	4848      	ldr	r0, [pc, #288]	; (8000800 <OLED_Init+0x134>)
 80006de:	f7ff ff0f 	bl	8000500 <LL_GPIO_ResetOutputPin>
	HAL_Delay(300);
 80006e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006e6:	f001 fb33 	bl	8001d50 <HAL_Delay>
	OLED_RST_Set();
 80006ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ee:	4844      	ldr	r0, [pc, #272]	; (8000800 <OLED_Init+0x134>)
 80006f0:	f7ff fef8 	bl	80004e4 <LL_GPIO_SetOutputPin>
	HAL_Delay(300);
 80006f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006f8:	f001 fb2a 	bl	8001d50 <HAL_Delay>
	OLED_RST_Set(); 
 80006fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000700:	483f      	ldr	r0, [pc, #252]	; (8000800 <OLED_Init+0x134>)
 8000702:	f7ff feef 	bl	80004e4 <LL_GPIO_SetOutputPin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8000706:	2100      	movs	r1, #0
 8000708:	20ae      	movs	r0, #174	; 0xae
 800070a:	f7ff ff09 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff05 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8000716:	2100      	movs	r1, #0
 8000718:	2010      	movs	r0, #16
 800071a:	f7ff ff01 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800071e:	2100      	movs	r1, #0
 8000720:	2040      	movs	r0, #64	; 0x40
 8000722:	f7ff fefd 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 8000726:	2100      	movs	r1, #0
 8000728:	2081      	movs	r0, #129	; 0x81
 800072a:	f7ff fef9 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 800072e:	2100      	movs	r1, #0
 8000730:	20cf      	movs	r0, #207	; 0xcf
 8000732:	f7ff fef5 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 8000736:	2100      	movs	r1, #0
 8000738:	20a1      	movs	r0, #161	; 0xa1
 800073a:	f7ff fef1 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 800073e:	2100      	movs	r1, #0
 8000740:	20c8      	movs	r0, #200	; 0xc8
 8000742:	f7ff feed 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 8000746:	2100      	movs	r1, #0
 8000748:	20a6      	movs	r0, #166	; 0xa6
 800074a:	f7ff fee9 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 800074e:	2100      	movs	r1, #0
 8000750:	20a8      	movs	r0, #168	; 0xa8
 8000752:	f7ff fee5 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 8000756:	2100      	movs	r1, #0
 8000758:	203f      	movs	r0, #63	; 0x3f
 800075a:	f7ff fee1 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800075e:	2100      	movs	r1, #0
 8000760:	20d3      	movs	r0, #211	; 0xd3
 8000762:	f7ff fedd 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff fed9 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 800076e:	2100      	movs	r1, #0
 8000770:	20d5      	movs	r0, #213	; 0xd5
 8000772:	f7ff fed5 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 8000776:	2100      	movs	r1, #0
 8000778:	2080      	movs	r0, #128	; 0x80
 800077a:	f7ff fed1 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 800077e:	2100      	movs	r1, #0
 8000780:	20d9      	movs	r0, #217	; 0xd9
 8000782:	f7ff fecd 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8000786:	2100      	movs	r1, #0
 8000788:	20f1      	movs	r0, #241	; 0xf1
 800078a:	f7ff fec9 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 800078e:	2100      	movs	r1, #0
 8000790:	20da      	movs	r0, #218	; 0xda
 8000792:	f7ff fec5 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8000796:	2100      	movs	r1, #0
 8000798:	2012      	movs	r0, #18
 800079a:	f7ff fec1 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 800079e:	2100      	movs	r1, #0
 80007a0:	20db      	movs	r0, #219	; 0xdb
 80007a2:	f7ff febd 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 80007a6:	2100      	movs	r1, #0
 80007a8:	2040      	movs	r0, #64	; 0x40
 80007aa:	f7ff feb9 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80007ae:	2100      	movs	r1, #0
 80007b0:	2020      	movs	r0, #32
 80007b2:	f7ff feb5 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 80007b6:	2100      	movs	r1, #0
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff feb1 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 80007be:	2100      	movs	r1, #0
 80007c0:	208d      	movs	r0, #141	; 0x8d
 80007c2:	f7ff fead 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 80007c6:	2100      	movs	r1, #0
 80007c8:	2014      	movs	r0, #20
 80007ca:	f7ff fea9 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 80007ce:	2100      	movs	r1, #0
 80007d0:	20a4      	movs	r0, #164	; 0xa4
 80007d2:	f7ff fea5 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 80007d6:	2100      	movs	r1, #0
 80007d8:	20a6      	movs	r0, #166	; 0xa6
 80007da:	f7ff fea1 	bl	8000520 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 80007de:	2100      	movs	r1, #0
 80007e0:	20af      	movs	r0, #175	; 0xaf
 80007e2:	f7ff fe9d 	bl	8000520 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 80007e6:	2100      	movs	r1, #0
 80007e8:	20af      	movs	r0, #175	; 0xaf
 80007ea:	f7ff fe99 	bl	8000520 <OLED_WR_Byte>
	OLED_Clear();
 80007ee:	f7ff fef5 	bl	80005dc <OLED_Clear>
	OLED_Set_Pos(0,0); 	
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fec7 	bl	8000588 <OLED_Set_Pos>
}  
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40020400 	.word	0x40020400

08000804 <LL_GPIO_WriteOutputPort>:
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	615a      	str	r2, [r3, #20]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_GPIO_ReadOutputPort>:
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LL_GPIO_SetOutputPin>:
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	619a      	str	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_GPIO_ResetOutputPin>:
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	041a      	lsls	r2, r3, #16
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	619a      	str	r2, [r3, #24]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000872:	b480      	push	{r7}
 8000874:	b085      	sub	sp, #20
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	4013      	ands	r3, r2
 8000888:	041a      	lsls	r2, r3, #16
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	43d9      	mvns	r1, r3
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	400b      	ands	r3, r1
 8000892:	431a      	orrs	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	619a      	str	r2, [r3, #24]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_FREERTOS_Init+0x68>)
 80008aa:	2101      	movs	r1, #1
 80008ac:	2001      	movs	r0, #1
 80008ae:	f003 fb40 	bl	8003f32 <osSemaphoreNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a16      	ldr	r2, [pc, #88]	; (8000910 <MX_FREERTOS_Init+0x6c>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 1, &myBinarySem02_attributes);
 80008b8:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_FREERTOS_Init+0x70>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	2001      	movs	r0, #1
 80008be:	f003 fb38 	bl	8003f32 <osSemaphoreNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <MX_FREERTOS_Init+0x74>)
 80008c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <MX_FREERTOS_Init+0x78>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4814      	ldr	r0, [pc, #80]	; (8000920 <MX_FREERTOS_Init+0x7c>)
 80008ce:	f003 fa83 	bl	8003dd8 <osThreadNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_FREERTOS_Init+0x80>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_FREERTOS_Init+0x84>)
 80008da:	2100      	movs	r1, #0
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <MX_FREERTOS_Init+0x88>)
 80008de:	f003 fa7b 	bl	8003dd8 <osThreadNew>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_FREERTOS_Init+0x8c>)
 80008e6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_FREERTOS_Init+0x90>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <MX_FREERTOS_Init+0x94>)
 80008ee:	f003 fa73 	bl	8003dd8 <osThreadNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a11      	ldr	r2, [pc, #68]	; (800093c <MX_FREERTOS_Init+0x98>)
 80008f6:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <MX_FREERTOS_Init+0x9c>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_FREERTOS_Init+0xa0>)
 80008fe:	f003 fa6b 	bl	8003dd8 <osThreadNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <MX_FREERTOS_Init+0xa4>)
 8000906:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08007720 	.word	0x08007720
 8000910:	200020a0 	.word	0x200020a0
 8000914:	08007730 	.word	0x08007730
 8000918:	200020a4 	.word	0x200020a4
 800091c:	08007690 	.word	0x08007690
 8000920:	0800094d 	.word	0x0800094d
 8000924:	20002090 	.word	0x20002090
 8000928:	080076b4 	.word	0x080076b4
 800092c:	0800096d 	.word	0x0800096d
 8000930:	20002094 	.word	0x20002094
 8000934:	080076d8 	.word	0x080076d8
 8000938:	08000a5d 	.word	0x08000a5d
 800093c:	20002098 	.word	0x20002098
 8000940:	080076fc 	.word	0x080076fc
 8000944:	08000ae5 	.word	0x08000ae5
 8000948:	2000209c 	.word	0x2000209c

0800094c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	LL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000954:	2120      	movs	r1, #32
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <StartDefaultTask+0x1c>)
 8000958:	f7ff ff8b 	bl	8000872 <LL_GPIO_TogglePin>
	osDelay(500);
 800095c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000960:	f003 facc 	bl	8003efc <osDelay>
	LL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000964:	e7f6      	b.n	8000954 <StartDefaultTask+0x8>
 8000966:	bf00      	nop
 8000968:	40020000 	.word	0x40020000

0800096c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	//uint32_t i=0;
	OLED_Init();
 8000974:	f7ff feaa 	bl	80006cc <OLED_Init>
	osDelay(500);
 8000978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097c:	f003 fabe 	bl	8003efc <osDelay>
	OLED_Clear();
 8000980:	f7ff fe2c 	bl	80005dc <OLED_Clear>
	OLED_DrawBMP(0,0,128,8,(unsigned char *)Bnana_BMP0);//
 8000984:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <StartTask02+0xd0>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2308      	movs	r3, #8
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	2100      	movs	r1, #0
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff fe52 	bl	8000638 <OLED_DrawBMP>
	osDelay(3000);
 8000994:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000998:	f003 fab0 	bl	8003efc <osDelay>
	OLED_Clear();
 800099c:	f7ff fe1e 	bl	80005dc <OLED_Clear>
  /* Infinite loop */
  for(;;)
  {


	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork1);//
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <StartTask02+0xd4>)
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2308      	movs	r3, #8
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	2100      	movs	r1, #0
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fe44 	bl	8000638 <OLED_DrawBMP>
	  	osDelay(50);
 80009b0:	2032      	movs	r0, #50	; 0x32
 80009b2:	f003 faa3 	bl	8003efc <osDelay>
	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork2);//??BMP????
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <StartTask02+0xd8>)
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2308      	movs	r3, #8
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	2100      	movs	r1, #0
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fe39 	bl	8000638 <OLED_DrawBMP>
	  	osDelay(50);
 80009c6:	2032      	movs	r0, #50	; 0x32
 80009c8:	f003 fa98 	bl	8003efc <osDelay>
	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork3);//??BMP????
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <StartTask02+0xdc>)
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2308      	movs	r3, #8
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	2100      	movs	r1, #0
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fe2e 	bl	8000638 <OLED_DrawBMP>
	  	osDelay(50);
 80009dc:	2032      	movs	r0, #50	; 0x32
 80009de:	f003 fa8d 	bl	8003efc <osDelay>
	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork4);//??BMP????
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <StartTask02+0xe0>)
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2308      	movs	r3, #8
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	2100      	movs	r1, #0
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fe23 	bl	8000638 <OLED_DrawBMP>
	  	osDelay(50);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f003 fa82 	bl	8003efc <osDelay>
	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork5);//??BMP????
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <StartTask02+0xe4>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2308      	movs	r3, #8
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fe18 	bl	8000638 <OLED_DrawBMP>
	  	osDelay(50);
 8000a08:	2032      	movs	r0, #50	; 0x32
 8000a0a:	f003 fa77 	bl	8003efc <osDelay>
	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork6);//??BMP????
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <StartTask02+0xe8>)
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2308      	movs	r3, #8
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	2100      	movs	r1, #0
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fe0d 	bl	8000638 <OLED_DrawBMP>
	  	osDelay(50);
 8000a1e:	2032      	movs	r0, #50	; 0x32
 8000a20:	f003 fa6c 	bl	8003efc <osDelay>
	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork7);//??BMP????
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <StartTask02+0xec>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2308      	movs	r3, #8
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fe02 	bl	8000638 <OLED_DrawBMP>
	  	osDelay(50);
 8000a34:	2032      	movs	r0, #50	; 0x32
 8000a36:	f003 fa61 	bl	8003efc <osDelay>
	  	OLED_DrawBMP(0,0,128,8,(unsigned char *)FireWork1);//
 8000a3a:	e7b1      	b.n	80009a0 <StartTask02+0x34>
 8000a3c:	20001c00 	.word	0x20001c00
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000400 	.word	0x20000400
 8000a48:	20000800 	.word	0x20000800
 8000a4c:	20000c00 	.word	0x20000c00
 8000a50:	20001000 	.word	0x20001000
 8000a54:	20001400 	.word	0x20001400
 8000a58:	20001800 	.word	0x20001800

08000a5c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	StartReception();
 8000a64:	f001 f808 	bl	8001a78 <StartReception>
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(myBinarySem01Handle,osWaitForever);
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <StartTask03+0x70>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 fae7 	bl	8004044 <osSemaphoreAcquire>
		switch(pycommand)
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <StartTask03+0x74>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d01a      	beq.n	8000ab4 <StartTask03+0x58>
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	dc1c      	bgt.n	8000abc <StartTask03+0x60>
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d002      	beq.n	8000a8c <StartTask03+0x30>
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d00a      	beq.n	8000aa0 <StartTask03+0x44>
 8000a8a:	e017      	b.n	8000abc <StartTask03+0x60>
		{
		case 1:
			printString("one\n");
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <StartTask03+0x78>)
 8000a8e:	f000 ffc9 	bl	8001a24 <printString>
			CH446QTurnOnSwitch(0x00000000);  // Y0X0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f830 	bl	8000af8 <CH446QTurnOnSwitch>
			CH446QTurnOnSwitch(0x00000011);  // Y1X1
 8000a98:	2011      	movs	r0, #17
 8000a9a:	f000 f82d 	bl	8000af8 <CH446QTurnOnSwitch>
			break;
 8000a9e:	e010      	b.n	8000ac2 <StartTask03+0x66>
		case 2:
			printString("two\n");
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <StartTask03+0x7c>)
 8000aa2:	f000 ffbf 	bl	8001a24 <printString>
			CH446QTurnOffSwitch(0x00000000);  // Y0X0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f85a 	bl	8000b60 <CH446QTurnOffSwitch>
			CH446QTurnOffSwitch(0x00000011);  // Y1X1
 8000aac:	2011      	movs	r0, #17
 8000aae:	f000 f857 	bl	8000b60 <CH446QTurnOffSwitch>
			break;
 8000ab2:	e006      	b.n	8000ac2 <StartTask03+0x66>
		case 3:
			printString("three\n");
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <StartTask03+0x80>)
 8000ab6:	f000 ffb5 	bl	8001a24 <printString>
			break;
 8000aba:	e002      	b.n	8000ac2 <StartTask03+0x66>
		default:
			printString("None of the command\n");
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <StartTask03+0x84>)
 8000abe:	f000 ffb1 	bl	8001a24 <printString>
		}
		osDelay(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f003 fa1a 	bl	8003efc <osDelay>
		osSemaphoreAcquire(myBinarySem01Handle,osWaitForever);
 8000ac8:	e7ce      	b.n	8000a68 <StartTask03+0xc>
 8000aca:	bf00      	nop
 8000acc:	200020a0 	.word	0x200020a0
 8000ad0:	200021c0 	.word	0x200021c0
 8000ad4:	08007648 	.word	0x08007648
 8000ad8:	08007650 	.word	0x08007650
 8000adc:	08007658 	.word	0x08007658
 8000ae0:	08007660 	.word	0x08007660

08000ae4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	CH446ResetAllSwitch();
 8000aec:	f000 f86c 	bl	8000bc8 <CH446ResetAllSwitch>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f003 fa03 	bl	8003efc <osDelay>
 8000af6:	e7fb      	b.n	8000af0 <StartTask04+0xc>

08000af8 <CH446QTurnOnSwitch>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void CH446QTurnOnSwitch(uint32_t switchADDR)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

	uint32_t portCPinMask;
	//set CH446Q_DAT_Pin
	LL_GPIO_SetOutputPin(CH446Q_DAT_GPIO_Port, CH446Q_DAT_Pin);
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	4814      	ldr	r0, [pc, #80]	; (8000b58 <CH446QTurnOnSwitch+0x60>)
 8000b06:	f7ff fe97 	bl	8000838 <LL_GPIO_SetOutputPin>
	//protect pins in port C other than C0->C6
	portCPinMask = LL_GPIO_ReadOutputPort(GPIOC);
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <CH446QTurnOnSwitch+0x64>)
 8000b0c:	f7ff fe88 	bl	8000820 <LL_GPIO_ReadOutputPort>
 8000b10:	60f8      	str	r0, [r7, #12]
	switchADDR+=portCPinMask&0xFFFFFF80;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	607b      	str	r3, [r7, #4]
	//write address in parallel mode
	LL_GPIO_WriteOutputPort(GPIOC, switchADDR);
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	480e      	ldr	r0, [pc, #56]	; (8000b5c <CH446QTurnOnSwitch+0x64>)
 8000b22:	f7ff fe6f 	bl	8000804 <LL_GPIO_WriteOutputPort>
	//generate a pulse to activate this setting
	LL_GPIO_ResetOutputPin(CH446Q_STB_GPIO_Port, CH446Q_STB_Pin);
 8000b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <CH446QTurnOnSwitch+0x60>)
 8000b2c:	f7ff fe92 	bl	8000854 <LL_GPIO_ResetOutputPin>
	osDelay(1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f003 f9e3 	bl	8003efc <osDelay>
	LL_GPIO_SetOutputPin(CH446Q_STB_GPIO_Port, CH446Q_STB_Pin);
 8000b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <CH446QTurnOnSwitch+0x60>)
 8000b3c:	f7ff fe7c 	bl	8000838 <LL_GPIO_SetOutputPin>
	osDelay(1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f003 f9db 	bl	8003efc <osDelay>
	LL_GPIO_ResetOutputPin(CH446Q_STB_GPIO_Port, CH446Q_STB_Pin);
 8000b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <CH446QTurnOnSwitch+0x60>)
 8000b4c:	f7ff fe82 	bl	8000854 <LL_GPIO_ResetOutputPin>

}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020800 	.word	0x40020800

08000b60 <CH446QTurnOffSwitch>:

void CH446QTurnOffSwitch(uint32_t switchADDR)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

	uint32_t portCPinMask;
	//set CH446Q_DAT_Pin
	LL_GPIO_ResetOutputPin(CH446Q_DAT_GPIO_Port, CH446Q_DAT_Pin);
 8000b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <CH446QTurnOffSwitch+0x60>)
 8000b6e:	f7ff fe71 	bl	8000854 <LL_GPIO_ResetOutputPin>
	//protect pins in port C other than C0->C6
	portCPinMask = LL_GPIO_ReadOutputPort(GPIOC);
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <CH446QTurnOffSwitch+0x64>)
 8000b74:	f7ff fe54 	bl	8000820 <LL_GPIO_ReadOutputPort>
 8000b78:	60f8      	str	r0, [r7, #12]
	switchADDR+=portCPinMask&0xFFFFFF80;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	607b      	str	r3, [r7, #4]
	//write address in parallel mode
	LL_GPIO_WriteOutputPort(GPIOC, switchADDR);
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <CH446QTurnOffSwitch+0x64>)
 8000b8a:	f7ff fe3b 	bl	8000804 <LL_GPIO_WriteOutputPort>
	//generate a pulse to activate this setting
	LL_GPIO_ResetOutputPin(CH446Q_STB_GPIO_Port, CH446Q_STB_Pin);
 8000b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <CH446QTurnOffSwitch+0x60>)
 8000b94:	f7ff fe5e 	bl	8000854 <LL_GPIO_ResetOutputPin>
	osDelay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f003 f9af 	bl	8003efc <osDelay>
	LL_GPIO_SetOutputPin(CH446Q_STB_GPIO_Port, CH446Q_STB_Pin);
 8000b9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <CH446QTurnOffSwitch+0x60>)
 8000ba4:	f7ff fe48 	bl	8000838 <LL_GPIO_SetOutputPin>
	osDelay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f003 f9a7 	bl	8003efc <osDelay>
	LL_GPIO_ResetOutputPin(CH446Q_STB_GPIO_Port, CH446Q_STB_Pin);
 8000bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <CH446QTurnOffSwitch+0x60>)
 8000bb4:	f7ff fe4e 	bl	8000854 <LL_GPIO_ResetOutputPin>

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <CH446ResetAllSwitch>:
void CH446ResetAllSwitch()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(CH446Q_RST_GPIO_Port, CH446Q_RST_Pin);
 8000bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <CH446ResetAllSwitch+0x28>)
 8000bd2:	f7ff fe31 	bl	8000838 <LL_GPIO_SetOutputPin>

	LL_GPIO_SetOutputPin(CH446Q_CLK_GPIO_Port, CH446Q_CLK_Pin);
 8000bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <CH446ResetAllSwitch+0x28>)
 8000bdc:	f7ff fe2c 	bl	8000838 <LL_GPIO_SetOutputPin>


	LL_GPIO_ResetOutputPin(CH446Q_RST_GPIO_Port, CH446Q_RST_Pin);
 8000be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <CH446ResetAllSwitch+0x28>)
 8000be6:	f7ff fe35 	bl	8000854 <LL_GPIO_ResetOutputPin>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40023800 	.word	0x40023800

08000c24 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3302      	adds	r3, #2
 8000c36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	0c1b      	lsrs	r3, r3, #16
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	ea02 0103 	and.w	r1, r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	0c1b      	lsrs	r3, r3, #16
 8000c48:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	fa93 f3a3 	rbit	r3, r3
 8000c50:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	fab3 f383 	clz	r3, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	fa03 f202 	lsl.w	r2, r3, r2
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40013800 	.word	0x40013800

08000c80 <LL_GPIO_SetPinMode>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa93 f3a3 	rbit	r3, r3
 8000c9a:	613b      	str	r3, [r7, #16]
  return result;
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	fab3 f383 	clz	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	fa93 f3a3 	rbit	r3, r3
 8000cba:	61bb      	str	r3, [r7, #24]
  return result;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fab3 f383 	clz	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_GPIO_SetPinPull>:
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b089      	sub	sp, #36	; 0x24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	fa93 f3a3 	rbit	r3, r3
 8000cf8:	613b      	str	r3, [r7, #16]
  return result;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	fab3 f383 	clz	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2103      	movs	r1, #3
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa93 f3a3 	rbit	r3, r3
 8000d18:	61bb      	str	r3, [r7, #24]
  return result;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	fab3 f383 	clz	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	60da      	str	r2, [r3, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3724      	adds	r7, #36	; 0x24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_GPIO_ResetOutputPin>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	041a      	lsls	r2, r3, #16
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	619a      	str	r2, [r3, #24]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f7ff ff39 	bl	8000bf4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000d82:	2080      	movs	r0, #128	; 0x80
 8000d84:	f7ff ff36 	bl	8000bf4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ff33 	bl	8000bf4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f7ff ff30 	bl	8000bf4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000d94:	f640 41ff 	movw	r1, #3327	; 0xcff
 8000d98:	485a      	ldr	r0, [pc, #360]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000d9a:	f7ff ffcf 	bl	8000d3c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_10|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|CH446Q_DAT_Pin|CH446Q_RST_Pin|CH446Q_CLK_Pin
 8000d9e:	f44f 6172 	mov.w	r1, #3872	; 0xf20
 8000da2:	4859      	ldr	r0, [pc, #356]	; (8000f08 <MX_GPIO_Init+0x1ac>)
 8000da4:	f7ff ffca 	bl	8000d3c <LL_GPIO_ResetOutputPin>
                          |CH446Q_STB_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_DC_Pin|OLED_RES_Pin|HXCLK_Pin|OLED_CS_Pin);
 8000da8:	f245 0160 	movw	r1, #20576	; 0x5060
 8000dac:	4857      	ldr	r0, [pc, #348]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000dae:	f7ff ffc5 	bl	8000d3c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000db2:	4957      	ldr	r1, [pc, #348]	; (8000f10 <MX_GPIO_Init+0x1b4>)
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff ff35 	bl	8000c24 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbe:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 f975 	bl	80030c0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4849      	ldr	r0, [pc, #292]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dde:	f7ff ff7e 	bl	8000cde <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	4846      	ldr	r0, [pc, #280]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000dea:	f7ff ff49 	bl	8000c80 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000dee:	2303      	movs	r3, #3
 8000df0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000df2:	2301      	movs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4619      	mov	r1, r3
 8000e06:	483f      	ldr	r0, [pc, #252]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000e08:	f002 fae0 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8000e0c:	23fc      	movs	r3, #252	; 0xfc
 8000e0e:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e10:	2301      	movs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4837      	ldr	r0, [pc, #220]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000e26:	f002 fad1 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4831      	ldr	r0, [pc, #196]	; (8000f08 <MX_GPIO_Init+0x1ac>)
 8000e44:	f002 fac2 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RES_Pin;
 8000e48:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000e4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	482a      	ldr	r0, [pc, #168]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000e64:	f002 fab2 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH446Q_DAT_Pin|CH446Q_RST_Pin|CH446Q_CLK_Pin|CH446Q_STB_Pin;
 8000e68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e6c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4821      	ldr	r0, [pc, #132]	; (8000f08 <MX_GPIO_Init+0x1ac>)
 8000e84:	f002 faa2 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000e88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <MX_GPIO_Init+0x1a8>)
 8000ea4:	f002 fa92 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HXOUT_Pin;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(HXOUT_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4814      	ldr	r0, [pc, #80]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000eba:	f002 fa87 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HXCLK_Pin;
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(HXCLK_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000ed8:	f002 fa78 	bl	80033cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_GPIO_Init+0x1b0>)
 8000ef6:	f002 fa69 	bl	80033cc <LL_GPIO_Init>

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	00f00003 	.word	0x00f00003

08000f14 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <MX_I2C2_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_I2C2_Init+0x58>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_I2C2_Init+0x50>)
 8000f52:	f001 f98b 	bl	800226c <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 f9f4 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200020a8 	.word	0x200020a8
 8000f68:	40005800 	.word	0x40005800
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a22      	ldr	r2, [pc, #136]	; (8001018 <HAL_I2C_MspInit+0xa8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d13d      	bne.n	800100e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <HAL_I2C_MspInit+0xac>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_I2C_MspInit+0xac>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_I2C_MspInit+0xac>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <HAL_I2C_MspInit+0xb0>)
 8000fcc:	f000 ffca 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000fe2:	2309      	movs	r3, #9
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <HAL_I2C_MspInit+0xb0>)
 8000fee:	f000 ffb9 	bl	8001f64 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_I2C_MspInit+0xac>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_I2C_MspInit+0xac>)
 8000ffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_I2C_MspInit+0xac>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40005800 	.word	0x40005800
 800101c:	40023800 	.word	0x40023800
 8001020:	40020400 	.word	0x40020400

08001024 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_RCC_HSI_Enable+0x1c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <LL_RCC_HSI_Enable+0x1c>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <LL_RCC_HSI_IsReady+0x20>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b02      	cmp	r3, #2
 8001052:	bf0c      	ite	eq
 8001054:	2301      	moveq	r3, #1
 8001056:	2300      	movne	r3, #0
 8001058:	b2db      	uxtb	r3, r3
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40023800 	.word	0x40023800

08001068 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4904      	ldr	r1, [pc, #16]	; (8001090 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <LL_RCC_SetSysClkSource+0x24>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 0203 	bic.w	r2, r3, #3
 80010a4:	4904      	ldr	r1, [pc, #16]	; (80010b8 <LL_RCC_SetSysClkSource+0x24>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40023800 	.word	0x40023800

080010bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <LL_RCC_GetSysClkSource+0x18>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <LL_RCC_SetAHBPrescaler+0x24>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e8:	4904      	ldr	r1, [pc, #16]	; (80010fc <LL_RCC_SetAHBPrescaler+0x24>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40023800 	.word	0x40023800

08001100 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <LL_RCC_SetAPB1Prescaler+0x24>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001110:	4904      	ldr	r1, [pc, #16]	; (8001124 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4313      	orrs	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40023800 	.word	0x40023800

08001128 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001138:	4904      	ldr	r1, [pc, #16]	; (800114c <LL_RCC_SetAPB2Prescaler+0x24>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40023800 	.word	0x40023800

08001150 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <LL_RCC_SetTIMPrescaler+0x28>)
 800115a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800115e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001162:	4905      	ldr	r1, [pc, #20]	; (8001178 <LL_RCC_SetTIMPrescaler+0x28>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4313      	orrs	r3, r2
 8001168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40023800 	.word	0x40023800

0800117c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <LL_RCC_PLL_Enable+0x1c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <LL_RCC_PLL_Enable+0x1c>)
 8001186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <LL_RCC_PLL_IsReady+0x24>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80011d8:	4013      	ands	r3, r2
 80011da:	68f9      	ldr	r1, [r7, #12]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	4311      	orrs	r1, r2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	0192      	lsls	r2, r2, #6
 80011e4:	430a      	orrs	r2, r1
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011f4:	4904      	ldr	r1, [pc, #16]	; (8001208 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40023800 	.word	0x40023800
 800120c:	ffbf8000 	.word	0xffbf8000

08001210 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <LL_FLASH_SetLatency+0x24>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 0207 	bic.w	r2, r3, #7
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <LL_FLASH_SetLatency+0x24>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40023c00 	.word	0x40023c00

08001238 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <LL_FLASH_GetLatency+0x18>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0307 	and.w	r3, r3, #7
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001264:	4904      	ldr	r1, [pc, #16]	; (8001278 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40007000 	.word	0x40007000

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fcf4 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f812 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f7ff fd68 	bl	8000d5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800128c:	f000 fb6a 	bl	8001964 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001290:	f000 f980 	bl	8001594 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001294:	f7ff fe3e 	bl	8000f14 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001298:	f000 f85c 	bl	8001354 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800129c:	f002 fd52 	bl	8003d44 <osKernelInitialize>
  MX_FREERTOS_Init();
 80012a0:	f7ff fb00 	bl	80008a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012a4:	f002 fd72 	bl	8003d8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <main+0x2c>
	...

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f7ff ffad 	bl	8001210 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffbe 	bl	8001238 <LL_FLASH_GetLatency>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d1fa      	bne.n	80012b8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80012c2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80012c6:	f7ff ffc5 	bl	8001254 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80012ca:	2010      	movs	r0, #16
 80012cc:	f7ff fecc 	bl	8001068 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80012d0:	f7ff fea8 	bl	8001024 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80012d4:	bf00      	nop
 80012d6:	f7ff feb5 	bl	8001044 <LL_RCC_HSI_IsReady>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d1fa      	bne.n	80012d6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 80012e0:	2300      	movs	r3, #0
 80012e2:	2264      	movs	r2, #100	; 0x64
 80012e4:	2108      	movs	r1, #8
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff ff6c 	bl	80011c4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80012ec:	f7ff ff46 	bl	800117c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80012f0:	bf00      	nop
 80012f2:	f7ff ff53 	bl	800119c <LL_RCC_PLL_IsReady>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d1fa      	bne.n	80012f2 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff feeb 	bl	80010d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001302:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001306:	f7ff fefb 	bl	8001100 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff ff0c 	bl	8001128 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001310:	2002      	movs	r0, #2
 8001312:	f7ff febf 	bl	8001094 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001316:	bf00      	nop
 8001318:	f7ff fed0 	bl	80010bc <LL_RCC_GetSysClkSource>
 800131c:	4603      	mov	r3, r0
 800131e:	2b08      	cmp	r3, #8
 8001320:	d1fa      	bne.n	8001318 <SystemClock_Config+0x6c>
  {

  }
  LL_SetSystemCoreClock(100000000);
 8001322:	4808      	ldr	r0, [pc, #32]	; (8001344 <SystemClock_Config+0x98>)
 8001324:	f002 fcca 	bl	8003cbc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001328:	200f      	movs	r0, #15
 800132a:	f000 fcc1 	bl	8001cb0 <HAL_InitTick>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001334:	f000 f808 	bl	8001348 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff09 	bl	8001150 <LL_RCC_SetTIMPrescaler>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	05f5e100 	.word	0x05f5e100

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_SPI2_Init+0x64>)
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <MX_SPI2_Init+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001364:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_SPI2_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001374:	2202      	movs	r2, #2
 8001376:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_SPI2_Init+0x64>)
 800137a:	2201      	movs	r2, #1
 800137c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001384:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <MX_SPI2_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_SPI2_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_SPI2_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_SPI2_Init+0x64>)
 80013a0:	220a      	movs	r2, #10
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_SPI2_Init+0x64>)
 80013a6:	f001 f8c5 	bl	8002534 <HAL_SPI_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013b0:	f7ff ffca 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200020fc 	.word	0x200020fc
 80013bc:	40003800 	.word	0x40003800

080013c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_SPI_MspInit+0x84>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12c      	bne.n	800143c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_SPI_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_SPI_MspInit+0x88>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_SPI_MspInit+0x88>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_SPI_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_SPI_MspInit+0x88>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_SPI_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800141a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142c:	2305      	movs	r3, #5
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_SPI_MspInit+0x8c>)
 8001438:	f000 fd94 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40003800 	.word	0x40003800
 8001448:	40023800 	.word	0x40023800
 800144c:	40020400 	.word	0x40020400

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_MspInit+0x54>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_MspInit+0x54>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x54>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_MspInit+0x54>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_MspInit+0x54>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_MspInit+0x54>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	210f      	movs	r1, #15
 8001492:	f06f 0001 	mvn.w	r0, #1
 8001496:	f000 fd3c 	bl	8001f12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	2b20      	cmp	r3, #32
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 fbf4 	bl	8001d10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001528:	f004 fd60 	bl	8005fec <xTaskGetSchedulerState>
 800152c:	4603      	mov	r3, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	d001      	beq.n	8001536 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001532:	f005 fc49 	bl	8006dc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
		  /* Check RXNE flag value in SR register */
	  if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <USART2_IRQHandler+0x30>)
 8001542:	f7ff ffb1 	bl	80014a8 <LL_USART_IsActiveFlag_RXNE>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <USART2_IRQHandler+0x24>
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <USART2_IRQHandler+0x30>)
 800154e:	f7ff ffbe 	bl	80014ce <LL_USART_IsEnabledIT_RXNE>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <USART2_IRQHandler+0x24>
	  {
	    /* RXNE flag will be cleared by reading of DR register (done in call) */

			USART_CharReceptionContinuous_Callback('\r');
 8001558:	200d      	movs	r0, #13
 800155a:	f000 faa1 	bl	8001aa0 <USART_CharReceptionContinuous_Callback>
	  {
 800155e:	e002      	b.n	8001566 <USART2_IRQHandler+0x2a>

	  }
	  else
	  {
	    /* Call Error function */
	    Error_Handler();
 8001560:	f7ff fef2 	bl	8001348 <Error_Handler>
	  }

  /* USER CODE END USART2_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40004400 	.word	0x40004400

08001570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <SystemInit+0x20>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <SystemInit+0x20>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_TIM4_Init+0x90>)
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <MX_TIM4_Init+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_TIM4_Init+0x90>)
 80015b8:	2263      	movs	r2, #99	; 0x63
 80015ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_TIM4_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_TIM4_Init+0x90>)
 80015c4:	2204      	movs	r2, #4
 80015c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_TIM4_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <MX_TIM4_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015d4:	4813      	ldr	r0, [pc, #76]	; (8001624 <MX_TIM4_Init+0x90>)
 80015d6:	f001 fa3d 	bl	8002a54 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80015e0:	f7ff feb2 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_TIM4_Init+0x90>)
 80015f2:	f001 fa7e 	bl	8002af2 <HAL_TIM_ConfigClockSource>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80015fc:	f7ff fea4 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_TIM4_Init+0x90>)
 800160e:	f001 fc51 	bl	8002eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001618:	f7ff fe96 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20002154 	.word	0x20002154
 8001628:	40000800 	.word	0x40000800

0800162c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_TIM_Base_MspInit+0x3c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d10d      	bne.n	800165a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_TIM_Base_MspInit+0x40>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_TIM_Base_MspInit+0x40>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_TIM_Base_MspInit+0x40>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40000800 	.word	0x40000800
 800166c:	40023800 	.word	0x40023800

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <__NVIC_EnableIRQ+0x38>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <LL_AHB1_GRP1_EnableClock>:
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800178e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800179a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40023800 	.word	0x40023800

080017b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4013      	ands	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40023800 	.word	0x40023800

080017e4 <LL_USART_Enable>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_USART_ConfigAsyncMode>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	615a      	str	r2, [r3, #20]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_USART_IsActiveFlag_TC>:
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b40      	cmp	r3, #64	; 0x40
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_USART_IsActiveFlag_TXE>:
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	2b80      	cmp	r3, #128	; 0x80
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_USART_ClearFlag_ORE>:
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800188a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_USART_EnableIT_RXNE>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	330c      	adds	r3, #12
 80018ac:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	e853 3f00 	ldrex	r3, [r3]
 80018b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	330c      	adds	r3, #12
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	61ba      	str	r2, [r7, #24]
 80018c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018c8:	6979      	ldr	r1, [r7, #20]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	e841 2300 	strex	r3, r2, [r1]
 80018d0:	613b      	str	r3, [r7, #16]
   return(result);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1e7      	bne.n	80018a8 <LL_USART_EnableIT_RXNE+0x8>
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_USART_EnableIT_ERROR>:
{
 80018e6:	b480      	push	{r7}
 80018e8:	b089      	sub	sp, #36	; 0x24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3314      	adds	r3, #20
 80018f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	e853 3f00 	ldrex	r3, [r3]
 80018fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3314      	adds	r3, #20
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	61ba      	str	r2, [r7, #24]
 800190c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800190e:	6979      	ldr	r1, [r7, #20]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	e841 2300 	strex	r3, r2, [r1]
 8001916:	613b      	str	r3, [r7, #16]
   return(result);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1e7      	bne.n	80018ee <LL_USART_EnableIT_ERROR+0x8>
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	3724      	adds	r7, #36	; 0x24
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	b2db      	uxtb	r3, r3
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800198e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001992:	f7ff ff0f 	bl	80017b4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff fef4 	bl	8001784 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800199c:	230c      	movs	r3, #12
 800199e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019a0:	2302      	movs	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80019b0:	2307      	movs	r3, #7
 80019b2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_USART2_UART_Init+0xb8>)
 80019ba:	f001 fd07 	bl	80033cc <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),8, 0));
 80019be:	f7ff fe57 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2200      	movs	r2, #0
 80019c6:	2108      	movs	r1, #8
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fea7 	bl	800171c <NVIC_EncodePriority>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
 80019d2:	2026      	movs	r0, #38	; 0x26
 80019d4:	f7ff fe78 	bl	80016c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80019d8:	2026      	movs	r0, #38	; 0x26
 80019da:	f7ff fe57 	bl	800168c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80019de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019e2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019f0:	230c      	movs	r3, #12
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <MX_USART2_UART_Init+0xbc>)
 8001a04:	f002 f8f6 	bl	8003bf4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART2_UART_Init+0xbc>)
 8001a0a:	f7ff fefb 	bl	8001804 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_USART2_UART_Init+0xbc>)
 8001a10:	f7ff fee8 	bl	80017e4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3738      	adds	r7, #56	; 0x38
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40004400 	.word	0x40004400

08001a24 <printString>:
  * @brief  Send String on USART Tx line (to PC Com port).
  * @param  None
  * @retval None
  */
void printString(uint8_t *senString)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  //uint32_t index = 0;
  uint8_t *pchar;
	pchar=senString;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Send characters one per one, until last char to be sent */
  while(1)
  {
    /* Wait for TXE flag to be raised */
    while (!LL_USART_IsActiveFlag_TXE(USART2))
 8001a30:	bf00      	nop
 8001a32:	4810      	ldr	r0, [pc, #64]	; (8001a74 <printString+0x50>)
 8001a34:	f7ff ff0f 	bl	8001856 <LL_USART_IsActiveFlag_TXE>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f9      	beq.n	8001a32 <printString+0xe>
    {
    }

    /* Write character in Transmit Data register.
       TXE flag is cleared by writing data in DR register */
    LL_USART_TransmitData8(USART2, *pchar);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <printString+0x50>)
 8001a46:	f7ff ff7e 	bl	8001946 <LL_USART_TransmitData8>

		if((*pchar)=='\n')break;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b0a      	cmp	r3, #10
 8001a50:	d003      	beq.n	8001a5a <printString+0x36>
		pchar++;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3301      	adds	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
    while (!LL_USART_IsActiveFlag_TXE(USART2))
 8001a58:	e7ea      	b.n	8001a30 <printString+0xc>
		if((*pchar)=='\n')break;
 8001a5a:	bf00      	nop

  }

  /* Wait for TC flag to be raised for last char */
  while (!LL_USART_IsActiveFlag_TC(USART2))
 8001a5c:	bf00      	nop
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <printString+0x50>)
 8001a60:	f7ff fee6 	bl	8001830 <LL_USART_IsActiveFlag_TC>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f9      	beq.n	8001a5e <printString+0x3a>
  {
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40004400 	.word	0x40004400

08001a78 <StartReception>:
  * @brief  This function prints user info on PC com port and initiates RX transfer
  * @param  None
  * @retval None
  */
void StartReception(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Initializes Buffer swap mechanism :
     - 2 physical buffers aRXBufferA and aRXBufferB (RX_BUFFER_SIZE length)

  */
  uwNbReceivedChars = 0;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <StartReception+0x20>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

  /* Print user info on PC com port */
//  PrintInfo(aTextInfoStart, sizeof(aTextInfoStart));

  /* Clear Overrun flag, in case characters have already been sent to USART */
  LL_USART_ClearFlag_ORE(USART2);
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <StartReception+0x24>)
 8001a84:	f7ff fefa 	bl	800187c <LL_USART_ClearFlag_ORE>

  /* Enable RXNE and Error interrupts */
  LL_USART_EnableIT_RXNE(USART2);
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <StartReception+0x24>)
 8001a8a:	f7ff ff09 	bl	80018a0 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_ERROR(USART2);
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <StartReception+0x24>)
 8001a90:	f7ff ff29 	bl	80018e6 <LL_USART_EnableIT_ERROR>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200021bc 	.word	0x200021bc
 8001a9c:	40004400 	.word	0x40004400

08001aa0 <USART_CharReceptionContinuous_Callback>:




void USART_CharReceptionContinuous_Callback(uint8_t endByte)//continues receive bytes until end byte
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t ctemp;

  /* Read Received character. RXNE flag is cleared by reading of DR register */
	ctemp = LL_USART_ReceiveData8(USART2);
 8001aaa:	4815      	ldr	r0, [pc, #84]	; (8001b00 <USART_CharReceptionContinuous_Callback+0x60>)
 8001aac:	f7ff ff3e 	bl	800192c <LL_USART_ReceiveData8>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
	aRXBuffer[uwNbReceivedChars++]=ctemp;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <USART_CharReceptionContinuous_Callback+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	4912      	ldr	r1, [pc, #72]	; (8001b04 <USART_CharReceptionContinuous_Callback+0x64>)
 8001abc:	600a      	str	r2, [r1, #0]
 8001abe:	4912      	ldr	r1, [pc, #72]	; (8001b08 <USART_CharReceptionContinuous_Callback+0x68>)
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	54ca      	strb	r2, [r1, r3]
  /* Checks if Buffer full indication has been set */

	if (ctemp == endByte)
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d114      	bne.n	8001af6 <USART_CharReceptionContinuous_Callback+0x56>
	{
		aRXBuffer[uwNbReceivedChars-1] = '\0';
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <USART_CharReceptionContinuous_Callback+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <USART_CharReceptionContinuous_Callback+0x68>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	54d1      	strb	r1, [r2, r3]

		pycommand=atoi(aRXBuffer);
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <USART_CharReceptionContinuous_Callback+0x68>)
 8001ada:	f005 fbef 	bl	80072bc <atoi>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <USART_CharReceptionContinuous_Callback+0x6c>)
 8001ae4:	701a      	strb	r2, [r3, #0]

		osSemaphoreRelease(myBinarySem01Handle);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <USART_CharReceptionContinuous_Callback+0x70>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fafc 	bl	80040e8 <osSemaphoreRelease>
    /* Set Buffer swap indication */
    //aRXIndication = 0;
		uwNbReceivedChars = 0;
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <USART_CharReceptionContinuous_Callback+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
	}

}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40004400 	.word	0x40004400
 8001b04:	200021bc 	.word	0x200021bc
 8001b08:	2000219c 	.word	0x2000219c
 8001b0c:	200021c0 	.word	0x200021c0
 8001b10:	200020a0 	.word	0x200020a0

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	; (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff fd17 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f005 fbc5 	bl	80072d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff fb99 	bl	800127c <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20002074 	.word	0x20002074
  ldr r2, =_sidata
 8001b58:	080078cc 	.word	0x080078cc
  ldr r2, =_sbss
 8001b5c:	20002074 	.word	0x20002074
  ldr r4, =_ebss
 8001b60:	20006be8 	.word	0x20006be8

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>

08001b66 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
 8001b78:	f7ff fbe6 	bl	8001348 <Error_Handler>
 8001b7c:	e7fe      	b.n	8001b7c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7a1b      	ldrb	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d904      	bls.n	8001b90 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b86:	b672      	cpsid	i
}
 8001b88:	bf00      	nop
 8001b8a:	f7ff fbdd 	bl	8001348 <Error_Handler>
 8001b8e:	e7fe      	b.n	8001b8e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7a1b      	ldrb	r3, [r3, #8]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	b2d1      	uxtb	r1, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	7211      	strb	r1, [r2, #8]
 8001b9c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8001ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba6:	f383 8811 	msr	BASEPRI, r3
 8001baa:	f3bf 8f6f 	isb	sy
 8001bae:	f3bf 8f4f 	dsb	sy
 8001bb2:	60fa      	str	r2, [r7, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
 8001bd8:	f7ff fbb6 	bl	8001348 <Error_Handler>
 8001bdc:	e7fe      	b.n	8001bdc <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7a1b      	ldrb	r3, [r3, #8]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7a1b      	ldrb	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d904      	bls.n	8001bfc <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf2:	b672      	cpsid	i
}
 8001bf4:	bf00      	nop
 8001bf6:	f7ff fba7 	bl	8001348 <Error_Handler>
 8001bfa:	e7fe      	b.n	8001bfa <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7a1b      	ldrb	r3, [r3, #8]
 8001c00:	461a      	mov	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c10:	bf00      	nop
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c28:	b672      	cpsid	i
}
 8001c2a:	bf00      	nop
 8001c2c:	f7ff fb8c 	bl	8001348 <Error_Handler>
 8001c30:	e7fe      	b.n	8001c30 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff96 	bl	8001b66 <stm32_lock_acquire>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d104      	bne.n	8001c5a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
 8001c54:	f7ff fb78 	bl	8001348 <Error_Handler>
 8001c58:	e7fe      	b.n	8001c58 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ffb2 	bl	8001bc6 <stm32_lock_release>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_Init+0x40>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_Init+0x40>)
 8001c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_Init+0x40>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 f931 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f000 f808 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca0:	f7ff fbd6 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x54>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x58>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f93b 	bl	8001f4a <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cec:	f000 f911 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x5c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20002000 	.word	0x20002000
 8001d08:	20002008 	.word	0x20002008
 8001d0c:	20002004 	.word	0x20002004

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20002008 	.word	0x20002008
 8001d34:	200021d0 	.word	0x200021d0

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200021d0 	.word	0x200021d0

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Delay+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20002008 	.word	0x20002008

08001d98 <__NVIC_SetPriorityGrouping>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_SetPriority>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001edc:	f7ff ff8e 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff47 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff5c 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff8e 	bl	8001e50 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffb0 	bl	8001eb8 <SysTick_Config>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e159      	b.n	8002234 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8148 	bne.w	800222e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d005      	beq.n	8001fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d130      	bne.n	8002018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 0201 	and.w	r2, r3, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b03      	cmp	r3, #3
 8002022:	d017      	beq.n	8002054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d123      	bne.n	80020a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	08da      	lsrs	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3208      	adds	r2, #8
 8002068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a2 	beq.w	800222e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <HAL_GPIO_Init+0x2e8>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a56      	ldr	r2, [pc, #344]	; (800224c <HAL_GPIO_Init+0x2e8>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b54      	ldr	r3, [pc, #336]	; (800224c <HAL_GPIO_Init+0x2e8>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002106:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_GPIO_Init+0x2ec>)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_GPIO_Init+0x2f0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d019      	beq.n	8002166 <HAL_GPIO_Init+0x202>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a48      	ldr	r2, [pc, #288]	; (8002258 <HAL_GPIO_Init+0x2f4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0x1fe>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a47      	ldr	r2, [pc, #284]	; (800225c <HAL_GPIO_Init+0x2f8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00d      	beq.n	800215e <HAL_GPIO_Init+0x1fa>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a46      	ldr	r2, [pc, #280]	; (8002260 <HAL_GPIO_Init+0x2fc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <HAL_GPIO_Init+0x1f6>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a45      	ldr	r2, [pc, #276]	; (8002264 <HAL_GPIO_Init+0x300>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_GPIO_Init+0x1f2>
 8002152:	2304      	movs	r3, #4
 8002154:	e008      	b.n	8002168 <HAL_GPIO_Init+0x204>
 8002156:	2307      	movs	r3, #7
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x204>
 800215a:	2303      	movs	r3, #3
 800215c:	e004      	b.n	8002168 <HAL_GPIO_Init+0x204>
 800215e:	2302      	movs	r3, #2
 8002160:	e002      	b.n	8002168 <HAL_GPIO_Init+0x204>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x204>
 8002166:	2300      	movs	r3, #0
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f002 0203 	and.w	r2, r2, #3
 800216e:	0092      	lsls	r2, r2, #2
 8002170:	4093      	lsls	r3, r2
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002178:	4935      	ldr	r1, [pc, #212]	; (8002250 <HAL_GPIO_Init+0x2ec>)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_GPIO_Init+0x304>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021aa:	4a2f      	ldr	r2, [pc, #188]	; (8002268 <HAL_GPIO_Init+0x304>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_GPIO_Init+0x304>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <HAL_GPIO_Init+0x304>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_GPIO_Init+0x304>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fe:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_GPIO_Init+0x304>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_GPIO_Init+0x304>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_GPIO_Init+0x304>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3301      	adds	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2b0f      	cmp	r3, #15
 8002238:	f67f aea2 	bls.w	8001f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40013c00 	.word	0x40013c00

0800226c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e12b      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fe6c 	bl	8000f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d0:	f000 f91c 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a81      	ldr	r2, [pc, #516]	; (80024e0 <HAL_I2C_Init+0x274>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d807      	bhi.n	80022f0 <HAL_I2C_Init+0x84>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <HAL_I2C_Init+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e006      	b.n	80022fe <HAL_I2C_Init+0x92>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a7d      	ldr	r2, [pc, #500]	; (80024e8 <HAL_I2C_Init+0x27c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e7      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a78      	ldr	r2, [pc, #480]	; (80024ec <HAL_I2C_Init+0x280>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d802      	bhi.n	8002340 <HAL_I2C_Init+0xd4>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	e009      	b.n	8002354 <HAL_I2C_Init+0xe8>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_I2C_Init+0x284>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	495c      	ldr	r1, [pc, #368]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002370:	428b      	cmp	r3, r1
 8002372:	d819      	bhi.n	80023a8 <HAL_I2C_Init+0x13c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002388:	400b      	ands	r3, r1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_I2C_Init+0x138>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e59      	subs	r1, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fbb1 f3f3 	udiv	r3, r1, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	e051      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e04f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d111      	bne.n	80023d4 <HAL_I2C_Init+0x168>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e012      	b.n	80023fa <HAL_I2C_Init+0x18e>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x196>
 80023fe:	2301      	movs	r3, #1
 8002400:	e022      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <HAL_I2C_Init+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e58      	subs	r0, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	440b      	add	r3, r1
 8002418:	fbb0 f3f3 	udiv	r3, r0, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002426:	e00f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6809      	ldr	r1, [r1, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6911      	ldr	r1, [r2, #16]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68d2      	ldr	r2, [r2, #12]
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	000186a0 	.word	0x000186a0
 80024e4:	001e847f 	.word	0x001e847f
 80024e8:	003d08ff 	.word	0x003d08ff
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20002000 	.word	0x20002000

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a9b      	lsrs	r3, r3, #10
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08007750 	.word	0x08007750

08002534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e07b      	b.n	800263e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002556:	d009      	beq.n	800256c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
 800255e:	e005      	b.n	800256c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe ff1a 	bl	80013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	ea42 0103 	orr.w	r1, r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	f003 0104 	and.w	r1, r3, #4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f003 0210 	and.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69da      	ldr	r2, [r3, #28]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b088      	sub	sp, #32
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_SPI_Transmit+0x22>
 8002664:	2302      	movs	r3, #2
 8002666:	e126      	b.n	80028b6 <HAL_SPI_Transmit+0x270>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002670:	f7ff fb62 	bl	8001d38 <HAL_GetTick>
 8002674:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d002      	beq.n	800268c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	77fb      	strb	r3, [r7, #31]
    goto error;
 800268a:	e10b      	b.n	80028a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_SPI_Transmit+0x52>
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800269c:	e102      	b.n	80028a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e4:	d10f      	bne.n	8002706 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002704:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d007      	beq.n	8002724 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800272c:	d14b      	bne.n	80027c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_SPI_Transmit+0xf6>
 8002736:	8afb      	ldrh	r3, [r7, #22]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d13e      	bne.n	80027ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	881a      	ldrh	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	1c9a      	adds	r2, r3, #2
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002760:	e02b      	b.n	80027ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d112      	bne.n	8002796 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	881a      	ldrh	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	1c9a      	adds	r2, r3, #2
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	86da      	strh	r2, [r3, #54]	; 0x36
 8002794:	e011      	b.n	80027ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002796:	f7ff facf 	bl	8001d38 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d803      	bhi.n	80027ae <HAL_SPI_Transmit+0x168>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ac:	d102      	bne.n	80027b4 <HAL_SPI_Transmit+0x16e>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027b8:	e074      	b.n	80028a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ce      	bne.n	8002762 <HAL_SPI_Transmit+0x11c>
 80027c4:	e04c      	b.n	8002860 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_SPI_Transmit+0x18e>
 80027ce:	8afb      	ldrh	r3, [r7, #22]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d140      	bne.n	8002856 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027fa:	e02c      	b.n	8002856 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b02      	cmp	r3, #2
 8002808:	d113      	bne.n	8002832 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002830:	e011      	b.n	8002856 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002832:	f7ff fa81 	bl	8001d38 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d803      	bhi.n	800284a <HAL_SPI_Transmit+0x204>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002848:	d102      	bne.n	8002850 <HAL_SPI_Transmit+0x20a>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002854:	e026      	b.n	80028a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1cd      	bne.n	80027fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f8b3 	bl	80029d0 <SPI_EndRxTxTransaction>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	e000      	b.n	80028a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80028a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028d0:	f7ff fa32 	bl	8001d38 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028e0:	f7ff fa2a 	bl	8001d38 <HAL_GetTick>
 80028e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	0d1b      	lsrs	r3, r3, #20
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f6:	e054      	b.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028fe:	d050      	beq.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002900:	f7ff fa1a 	bl	8001d38 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	d902      	bls.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d13d      	bne.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800292e:	d111      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002938:	d004      	beq.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d107      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295c:	d10f      	bne.n	800297e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800297c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e017      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3b01      	subs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d19b      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20002000 	.word	0x20002000

080029d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <SPI_EndRxTxTransaction+0x7c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <SPI_EndRxTxTransaction+0x80>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0d5b      	lsrs	r3, r3, #21
 80029e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fa:	d112      	bne.n	8002a22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ff5a 	bl	80028c0 <SPI_WaitFlagStateUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e00f      	b.n	8002a42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	2b80      	cmp	r3, #128	; 0x80
 8002a3a:	d0f2      	beq.n	8002a22 <SPI_EndRxTxTransaction+0x52>
 8002a3c:	e000      	b.n	8002a40 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a3e:	bf00      	nop
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20002000 	.word	0x20002000
 8002a50:	165e9f81 	.word	0x165e9f81

08002a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e041      	b.n	8002aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe fdd6 	bl	800162c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 f8f4 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_ConfigClockSource+0x1c>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0b4      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x186>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b46:	d03e      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xd4>
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4c:	f200 8087 	bhi.w	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	f000 8086 	beq.w	8002c64 <HAL_TIM_ConfigClockSource+0x172>
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5c:	d87f      	bhi.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b5e:	2b70      	cmp	r3, #112	; 0x70
 8002b60:	d01a      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0xa6>
 8002b62:	2b70      	cmp	r3, #112	; 0x70
 8002b64:	d87b      	bhi.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b66:	2b60      	cmp	r3, #96	; 0x60
 8002b68:	d050      	beq.n	8002c0c <HAL_TIM_ConfigClockSource+0x11a>
 8002b6a:	2b60      	cmp	r3, #96	; 0x60
 8002b6c:	d877      	bhi.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b6e:	2b50      	cmp	r3, #80	; 0x50
 8002b70:	d03c      	beq.n	8002bec <HAL_TIM_ConfigClockSource+0xfa>
 8002b72:	2b50      	cmp	r3, #80	; 0x50
 8002b74:	d873      	bhi.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d058      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0x13a>
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d86f      	bhi.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b7e:	2b30      	cmp	r3, #48	; 0x30
 8002b80:	d064      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0x15a>
 8002b82:	2b30      	cmp	r3, #48	; 0x30
 8002b84:	d86b      	bhi.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d060      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0x15a>
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d867      	bhi.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d05c      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0x15a>
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d05a      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0x15a>
 8002b96:	e062      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6899      	ldr	r1, [r3, #8]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f000 f964 	bl	8002e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	609a      	str	r2, [r3, #8]
      break;
 8002bc4:	e04f      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f000 f94d 	bl	8002e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be8:	609a      	str	r2, [r3, #8]
      break;
 8002bea:	e03c      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f000 f8c1 	bl	8002d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2150      	movs	r1, #80	; 0x50
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 f91a 	bl	8002e3e <TIM_ITRx_SetConfig>
      break;
 8002c0a:	e02c      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f000 f8e0 	bl	8002dde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2160      	movs	r1, #96	; 0x60
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f90a 	bl	8002e3e <TIM_ITRx_SetConfig>
      break;
 8002c2a:	e01c      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f000 f8a1 	bl	8002d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2140      	movs	r1, #64	; 0x40
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f8fa 	bl	8002e3e <TIM_ITRx_SetConfig>
      break;
 8002c4a:	e00c      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 f8f1 	bl	8002e3e <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e003      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      break;
 8002c62:	e000      	b.n	8002c66 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00f      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <TIM_Base_SetConfig+0xe8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <TIM_Base_SetConfig+0xec>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	; (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d017      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <TIM_Base_SetConfig+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <TIM_Base_SetConfig+0xec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <TIM_Base_SetConfig+0xf4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <TIM_Base_SetConfig+0xf8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <TIM_Base_SetConfig+0xfc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d103      	bne.n	8002d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	615a      	str	r2, [r3, #20]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 030a 	bic.w	r3, r3, #10
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0210 	bic.w	r2, r3, #16
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	031b      	lsls	r3, r3, #12
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f043 0307 	orr.w	r3, r3, #7
 8002e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	021a      	lsls	r2, r3, #8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e050      	b.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d013      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10c      	bne.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40000c00 	.word	0x40000c00
 8002f8c:	40014000 	.word	0x40014000

08002f90 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	40013c00 	.word	0x40013c00

08002fb4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4904      	ldr	r1, [pc, #16]	; (8002ffc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]

}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <LL_EXTI_DisableEvent_0_31+0x24>)
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	43db      	mvns	r3, r3
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003012:	4013      	ands	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40013c00 	.word	0x40013c00

08003028 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	4904      	ldr	r1, [pc, #16]	; (8003048 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40013c00 	.word	0x40013c00

0800304c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	43db      	mvns	r3, r3
 800305c:	4904      	ldr	r1, [pc, #16]	; (8003070 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800305e:	4013      	ands	r3, r2
 8003060:	608b      	str	r3, [r1, #8]

}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40013c00 	.word	0x40013c00

08003074 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	60cb      	str	r3, [r1, #12]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40013c00 	.word	0x40013c00

08003098 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60cb      	str	r3, [r1, #12]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40013c00 	.word	0x40013c00

080030c0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	791b      	ldrb	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d065      	beq.n	80031a0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d06c      	beq.n	80031b6 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	795b      	ldrb	r3, [r3, #5]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d01c      	beq.n	800311e <LL_EXTI_Init+0x5e>
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	dc25      	bgt.n	8003134 <LL_EXTI_Init+0x74>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <LL_EXTI_Init+0x32>
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d00b      	beq.n	8003108 <LL_EXTI_Init+0x48>
 80030f0:	e020      	b.n	8003134 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff ff82 	bl	8003000 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff45 	bl	8002f90 <LL_EXTI_EnableIT_0_31>
          break;
 8003106:	e018      	b.n	800313a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff51 	bl	8002fb4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff60 	bl	8002fdc <LL_EXTI_EnableEvent_0_31>
          break;
 800311c:	e00d      	b.n	800313a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff34 	bl	8002f90 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff55 	bl	8002fdc <LL_EXTI_EnableEvent_0_31>
          break;
 8003132:	e002      	b.n	800313a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
          break;
 8003138:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	799b      	ldrb	r3, [r3, #6]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d039      	beq.n	80031b6 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	799b      	ldrb	r3, [r3, #6]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d01c      	beq.n	8003184 <LL_EXTI_Init+0xc4>
 800314a:	2b03      	cmp	r3, #3
 800314c:	dc25      	bgt.n	800319a <LL_EXTI_Init+0xda>
 800314e:	2b01      	cmp	r3, #1
 8003150:	d002      	beq.n	8003158 <LL_EXTI_Init+0x98>
 8003152:	2b02      	cmp	r3, #2
 8003154:	d00b      	beq.n	800316e <LL_EXTI_Init+0xae>
 8003156:	e020      	b.n	800319a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff9b 	bl	8003098 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff5e 	bl	8003028 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800316c:	e024      	b.n	80031b8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff6a 	bl	800304c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff79 	bl	8003074 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003182:	e019      	b.n	80031b8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff4d 	bl	8003028 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff6e 	bl	8003074 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003198:	e00e      	b.n	80031b8 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
            break;
 800319e:	e00b      	b.n	80031b8 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff05 	bl	8002fb4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff26 	bl	8003000 <LL_EXTI_DisableEvent_0_31>
 80031b4:	e000      	b.n	80031b8 <LL_EXTI_Init+0xf8>
      }
 80031b6:	bf00      	nop
  }
  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <LL_GPIO_SetPinMode>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	b089      	sub	sp, #36	; 0x24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	613b      	str	r3, [r7, #16]
  return result;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2103      	movs	r1, #3
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	401a      	ands	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	61bb      	str	r3, [r7, #24]
  return result;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	431a      	orrs	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	3724      	adds	r7, #36	; 0x24
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_GPIO_SetPinOutputType>:
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	431a      	orrs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_GPIO_SetPinSpeed>:
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	613b      	str	r3, [r7, #16]
  return result;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2103      	movs	r1, #3
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	401a      	ands	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	61bb      	str	r3, [r7, #24]
  return result;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
}
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_GPIO_SetPinPull>:
{
 80032ae:	b480      	push	{r7}
 80032b0:	b089      	sub	sp, #36	; 0x24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	613b      	str	r3, [r7, #16]
  return result;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2103      	movs	r1, #3
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	401a      	ands	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	61bb      	str	r3, [r7, #24]
  return result;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	431a      	orrs	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	3724      	adds	r7, #36	; 0x24
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_GPIO_SetAFPin_0_7>:
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	613b      	str	r3, [r7, #16]
  return result;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	210f      	movs	r1, #15
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	61bb      	str	r3, [r7, #24]
  return result;
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	621a      	str	r2, [r3, #32]
}
 800335e:	bf00      	nop
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <LL_GPIO_SetAFPin_8_15>:
{
 800336a:	b480      	push	{r7}
 800336c:	b089      	sub	sp, #36	; 0x24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	613b      	str	r3, [r7, #16]
  return result;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	210f      	movs	r1, #15
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	61bb      	str	r3, [r7, #24]
  return result;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80033c0:	bf00      	nop
 80033c2:	3724      	adds	r7, #36	; 0x24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	613b      	str	r3, [r7, #16]
  return result;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80033f6:	e050      	b.n	800349a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d042      	beq.n	8003494 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d003      	beq.n	800341e <LL_GPIO_Init+0x52>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d10d      	bne.n	800343a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	461a      	mov	r2, r3
 8003424:	69b9      	ldr	r1, [r7, #24]
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff12 	bl	8003250 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	461a      	mov	r2, r3
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff fef3 	bl	8003220 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	461a      	mov	r2, r3
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff33 	bl	80032ae <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d11a      	bne.n	8003486 <LL_GPIO_Init+0xba>
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	60bb      	str	r3, [r7, #8]
  return result;
 800345c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b07      	cmp	r3, #7
 8003466:	d807      	bhi.n	8003478 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	461a      	mov	r2, r3
 800346e:	69b9      	ldr	r1, [r7, #24]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff4b 	bl	800330c <LL_GPIO_SetAFPin_0_7>
 8003476:	e006      	b.n	8003486 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	461a      	mov	r2, r3
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff72 	bl	800336a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fe97 	bl	80031c2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3301      	adds	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1a7      	bne.n	80033f8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <LL_RCC_GetSysClkSource>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <LL_RCC_GetSysClkSource+0x18>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800

080034d0 <LL_RCC_GetAHBPrescaler>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <LL_RCC_GetAHBPrescaler+0x18>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800

080034ec <LL_RCC_GetAPB1Prescaler>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <LL_RCC_GetAPB1Prescaler+0x18>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800

08003508 <LL_RCC_GetAPB2Prescaler>:
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <LL_RCC_GetAPB2Prescaler+0x18>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800

08003524 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <LL_RCC_PLL_GetMainSource+0x18>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800

08003540 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <LL_RCC_PLL_GetN+0x18>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40023800 	.word	0x40023800

0800355c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <LL_RCC_PLL_GetP+0x18>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <LL_RCC_PLL_GetDivider+0x18>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800359c:	f000 f820 	bl	80035e0 <RCC_GetSystemClockFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f840 	bl	8003630 <RCC_GetHCLKClockFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f84e 	bl	800365c <RCC_GetPCLK1ClockFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f85a 	bl	8003684 <RCC_GetPCLK2ClockFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80035ea:	f7ff ff63 	bl	80034b4 <LL_RCC_GetSysClkSource>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d00c      	beq.n	800360e <RCC_GetSystemClockFreq+0x2e>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d80f      	bhi.n	8003618 <RCC_GetSystemClockFreq+0x38>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <RCC_GetSystemClockFreq+0x22>
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d003      	beq.n	8003608 <RCC_GetSystemClockFreq+0x28>
 8003600:	e00a      	b.n	8003618 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <RCC_GetSystemClockFreq+0x48>)
 8003604:	607b      	str	r3, [r7, #4]
      break;
 8003606:	e00a      	b.n	800361e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <RCC_GetSystemClockFreq+0x4c>)
 800360a:	607b      	str	r3, [r7, #4]
      break;
 800360c:	e007      	b.n	800361e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800360e:	2008      	movs	r0, #8
 8003610:	f000 f84c 	bl	80036ac <RCC_PLL_GetFreqDomain_SYS>
 8003614:	6078      	str	r0, [r7, #4]
      break;
 8003616:	e002      	b.n	800361e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <RCC_GetSystemClockFreq+0x48>)
 800361a:	607b      	str	r3, [r7, #4]
      break;
 800361c:	bf00      	nop
  }

  return frequency;
 800361e:	687b      	ldr	r3, [r7, #4]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	00f42400 	.word	0x00f42400
 800362c:	007a1200 	.word	0x007a1200

08003630 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003638:	f7ff ff4a 	bl	80034d0 <LL_RCC_GetAHBPrescaler>
 800363c:	4603      	mov	r3, r0
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <RCC_GetHCLKClockFreq+0x28>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	40d3      	lsrs	r3, r2
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	08007740 	.word	0x08007740

0800365c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003664:	f7ff ff42 	bl	80034ec <LL_RCC_GetAPB1Prescaler>
 8003668:	4603      	mov	r3, r0
 800366a:	0a9b      	lsrs	r3, r3, #10
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <RCC_GetPCLK1ClockFreq+0x24>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	461a      	mov	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	40d3      	lsrs	r3, r2
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	08007750 	.word	0x08007750

08003684 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800368c:	f7ff ff3c 	bl	8003508 <LL_RCC_GetAPB2Prescaler>
 8003690:	4603      	mov	r3, r0
 8003692:	0b5b      	lsrs	r3, r3, #13
 8003694:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	40d3      	lsrs	r3, r2
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	08007750 	.word	0x08007750

080036ac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80036c0:	f7ff ff30 	bl	8003524 <LL_RCC_PLL_GetMainSource>
 80036c4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d2:	d003      	beq.n	80036dc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80036d4:	e005      	b.n	80036e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	e005      	b.n	80036e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80036de:	617b      	str	r3, [r7, #20]
      break;
 80036e0:	e002      	b.n	80036e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80036e4:	617b      	str	r3, [r7, #20]
      break;
 80036e6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d113      	bne.n	8003716 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80036ee:	f7ff ff43 	bl	8003578 <LL_RCC_PLL_GetDivider>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	fbb3 f4f2 	udiv	r4, r3, r2
 80036fa:	f7ff ff21 	bl	8003540 <LL_RCC_PLL_GetN>
 80036fe:	4603      	mov	r3, r0
 8003700:	fb03 f404 	mul.w	r4, r3, r4
 8003704:	f7ff ff2a 	bl	800355c <LL_RCC_PLL_GetP>
 8003708:	4603      	mov	r3, r0
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	3301      	adds	r3, #1
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fbb4 f3f3 	udiv	r3, r4, r3
 8003714:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003716:	693b      	ldr	r3, [r7, #16]
}
 8003718:	4618      	mov	r0, r3
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}
 8003720:	00f42400 	.word	0x00f42400
 8003724:	007a1200 	.word	0x007a1200

08003728 <LL_USART_IsEnabled>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_USART_SetStopBitsLength>:
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_USART_SetHWFlowCtrl>:
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	615a      	str	r2, [r3, #20]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_USART_SetBaudRate>:
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b0c0      	sub	sp, #256	; 0x100
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037a8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80037ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80037b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037bc:	f040 810c 	bne.w	80039d8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80037c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	6639      	str	r1, [r7, #96]	; 0x60
 80037da:	415b      	adcs	r3, r3
 80037dc:	667b      	str	r3, [r7, #100]	; 0x64
 80037de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80037e2:	4621      	mov	r1, r4
 80037e4:	eb12 0801 	adds.w	r8, r2, r1
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb43 0901 	adc.w	r9, r3, r1
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003802:	4690      	mov	r8, r2
 8003804:	4699      	mov	r9, r3
 8003806:	4623      	mov	r3, r4
 8003808:	eb18 0303 	adds.w	r3, r8, r3
 800380c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003810:	462b      	mov	r3, r5
 8003812:	eb49 0303 	adc.w	r3, r9, r3
 8003816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800381a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800381e:	2200      	movs	r2, #0
 8003820:	469a      	mov	sl, r3
 8003822:	4693      	mov	fp, r2
 8003824:	eb1a 030a 	adds.w	r3, sl, sl
 8003828:	65bb      	str	r3, [r7, #88]	; 0x58
 800382a:	eb4b 030b 	adc.w	r3, fp, fp
 800382e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003830:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003838:	f7fc fcd2 	bl	80001e0 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4b64      	ldr	r3, [pc, #400]	; (80039d4 <LL_USART_SetBaudRate+0x238>)
 8003842:	fba3 2302 	umull	r2, r3, r3, r2
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	b29b      	uxth	r3, r3
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	b29c      	uxth	r4, r3
 800384e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003858:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800385c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003860:	4642      	mov	r2, r8
 8003862:	464b      	mov	r3, r9
 8003864:	1891      	adds	r1, r2, r2
 8003866:	6539      	str	r1, [r7, #80]	; 0x50
 8003868:	415b      	adcs	r3, r3
 800386a:	657b      	str	r3, [r7, #84]	; 0x54
 800386c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003870:	4641      	mov	r1, r8
 8003872:	1851      	adds	r1, r2, r1
 8003874:	64b9      	str	r1, [r7, #72]	; 0x48
 8003876:	4649      	mov	r1, r9
 8003878:	414b      	adcs	r3, r1
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003888:	4659      	mov	r1, fp
 800388a:	00cb      	lsls	r3, r1, #3
 800388c:	4651      	mov	r1, sl
 800388e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003892:	4651      	mov	r1, sl
 8003894:	00ca      	lsls	r2, r1, #3
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	4603      	mov	r3, r0
 800389c:	4642      	mov	r2, r8
 800389e:	189b      	adds	r3, r3, r2
 80038a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038a4:	464b      	mov	r3, r9
 80038a6:	460a      	mov	r2, r1
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80038b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038ba:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80038be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80038c2:	460b      	mov	r3, r1
 80038c4:	18db      	adds	r3, r3, r3
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
 80038c8:	4613      	mov	r3, r2
 80038ca:	eb42 0303 	adc.w	r3, r2, r3
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
 80038d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80038d8:	f7fc fc82 	bl	80001e0 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4611      	mov	r1, r2
 80038e2:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <LL_USART_SetBaudRate+0x238>)
 80038e4:	fba3 2301 	umull	r2, r3, r3, r1
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	2264      	movs	r2, #100	; 0x64
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	1acb      	subs	r3, r1, r3
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <LL_USART_SetBaudRate+0x238>)
 80038fa:	fba3 2302 	umull	r2, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	b29b      	uxth	r3, r3
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800390a:	b29b      	uxth	r3, r3
 800390c:	4423      	add	r3, r4
 800390e:	b29c      	uxth	r4, r3
 8003910:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003914:	2200      	movs	r2, #0
 8003916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800391a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800391e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003922:	4642      	mov	r2, r8
 8003924:	464b      	mov	r3, r9
 8003926:	1891      	adds	r1, r2, r2
 8003928:	63b9      	str	r1, [r7, #56]	; 0x38
 800392a:	415b      	adcs	r3, r3
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003932:	4641      	mov	r1, r8
 8003934:	1851      	adds	r1, r2, r1
 8003936:	6339      	str	r1, [r7, #48]	; 0x30
 8003938:	4649      	mov	r1, r9
 800393a:	414b      	adcs	r3, r1
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800394a:	4659      	mov	r1, fp
 800394c:	00cb      	lsls	r3, r1, #3
 800394e:	4651      	mov	r1, sl
 8003950:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003954:	4651      	mov	r1, sl
 8003956:	00ca      	lsls	r2, r1, #3
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	4603      	mov	r3, r0
 800395e:	4642      	mov	r2, r8
 8003960:	189b      	adds	r3, r3, r2
 8003962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003966:	464b      	mov	r3, r9
 8003968:	460a      	mov	r2, r1
 800396a:	eb42 0303 	adc.w	r3, r2, r3
 800396e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003972:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003976:	2200      	movs	r2, #0
 8003978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800397c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003980:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003984:	460b      	mov	r3, r1
 8003986:	18db      	adds	r3, r3, r3
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
 800398a:	4613      	mov	r3, r2
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003996:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800399a:	f7fc fc21 	bl	80001e0 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <LL_USART_SetBaudRate+0x238>)
 80039a4:	fba3 1302 	umull	r1, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2164      	movs	r1, #100	; 0x64
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <LL_USART_SetBaudRate+0x238>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4423      	add	r3, r4
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	e107      	b.n	8003be4 <LL_USART_SetBaudRate+0x448>
 80039d4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80039d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039e6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80039ea:	4642      	mov	r2, r8
 80039ec:	464b      	mov	r3, r9
 80039ee:	1891      	adds	r1, r2, r2
 80039f0:	6239      	str	r1, [r7, #32]
 80039f2:	415b      	adcs	r3, r3
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039fa:	4641      	mov	r1, r8
 80039fc:	1854      	adds	r4, r2, r1
 80039fe:	4649      	mov	r1, r9
 8003a00:	eb43 0501 	adc.w	r5, r3, r1
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	00eb      	lsls	r3, r5, #3
 8003a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a12:	00e2      	lsls	r2, r4, #3
 8003a14:	4614      	mov	r4, r2
 8003a16:	461d      	mov	r5, r3
 8003a18:	4643      	mov	r3, r8
 8003a1a:	18e3      	adds	r3, r4, r3
 8003a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a20:	464b      	mov	r3, r9
 8003a22:	eb45 0303 	adc.w	r3, r5, r3
 8003a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003a44:	4629      	mov	r1, r5
 8003a46:	008b      	lsls	r3, r1, #2
 8003a48:	4621      	mov	r1, r4
 8003a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4e:	4621      	mov	r1, r4
 8003a50:	008a      	lsls	r2, r1, #2
 8003a52:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003a56:	f7fc fbc3 	bl	80001e0 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <LL_USART_SetBaudRate+0x454>)
 8003a60:	fba3 2302 	umull	r2, r3, r3, r2
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	b29c      	uxth	r4, r3
 8003a6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a7a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003a7e:	4642      	mov	r2, r8
 8003a80:	464b      	mov	r3, r9
 8003a82:	1891      	adds	r1, r2, r2
 8003a84:	61b9      	str	r1, [r7, #24]
 8003a86:	415b      	adcs	r3, r3
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a8e:	4641      	mov	r1, r8
 8003a90:	1851      	adds	r1, r2, r1
 8003a92:	6139      	str	r1, [r7, #16]
 8003a94:	4649      	mov	r1, r9
 8003a96:	414b      	adcs	r3, r1
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa6:	4659      	mov	r1, fp
 8003aa8:	00cb      	lsls	r3, r1, #3
 8003aaa:	4651      	mov	r1, sl
 8003aac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	00ca      	lsls	r2, r1, #3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4642      	mov	r2, r8
 8003abc:	189b      	adds	r3, r3, r2
 8003abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	eb42 0303 	adc.w	r3, r2, r3
 8003aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ace:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ad8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003ae8:	4649      	mov	r1, r9
 8003aea:	008b      	lsls	r3, r1, #2
 8003aec:	4641      	mov	r1, r8
 8003aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af2:	4641      	mov	r1, r8
 8003af4:	008a      	lsls	r2, r1, #2
 8003af6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003afa:	f7fc fb71 	bl	80001e0 <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <LL_USART_SetBaudRate+0x454>)
 8003b04:	fba3 1302 	umull	r1, r3, r3, r2
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	2164      	movs	r1, #100	; 0x64
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	3332      	adds	r3, #50	; 0x32
 8003b16:	4a36      	ldr	r2, [pc, #216]	; (8003bf0 <LL_USART_SetBaudRate+0x454>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4423      	add	r3, r4
 8003b28:	b29c      	uxth	r4, r3
 8003b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b2e:	2200      	movs	r2, #0
 8003b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	415b      	adcs	r3, r3
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b48:	4641      	mov	r1, r8
 8003b4a:	1851      	adds	r1, r2, r1
 8003b4c:	6039      	str	r1, [r7, #0]
 8003b4e:	4649      	mov	r1, r9
 8003b50:	414b      	adcs	r3, r1
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b60:	4659      	mov	r1, fp
 8003b62:	00cb      	lsls	r3, r1, #3
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	00ca      	lsls	r2, r1, #3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	4642      	mov	r2, r8
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	673b      	str	r3, [r7, #112]	; 0x70
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	eb42 0303 	adc.w	r3, r2, r3
 8003b82:	677b      	str	r3, [r7, #116]	; 0x74
 8003b84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	008b      	lsls	r3, r1, #2
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	008a      	lsls	r2, r1, #2
 8003ba8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003bac:	f7fc fb18 	bl	80001e0 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <LL_USART_SetBaudRate+0x454>)
 8003bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2164      	movs	r1, #100	; 0x64
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	3332      	adds	r3, #50	; 0x32
 8003bc8:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <LL_USART_SetBaudRate+0x454>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	4423      	add	r3, r4
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bea:	46bd      	mov	sp, r7
 8003bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf0:	51eb851f 	.word	0x51eb851f

08003bf4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fd8e 	bl	8003728 <LL_USART_IsEnabled>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d149      	bne.n	8003ca6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c1a:	f023 030c 	bic.w	r3, r3, #12
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	6851      	ldr	r1, [r2, #4]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	6912      	ldr	r2, [r2, #16]
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6992      	ldr	r2, [r2, #24]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fd85 	bl	8003750 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fd92 	bl	8003776 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003c52:	f107 0308 	add.w	r3, r7, #8
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fc9c 	bl	8003594 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <LL_USART_Init+0xbc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d102      	bne.n	8003c6a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e00c      	b.n	8003c84 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a11      	ldr	r2, [pc, #68]	; (8003cb4 <LL_USART_Init+0xc0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d102      	bne.n	8003c78 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	e005      	b.n	8003c84 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <LL_USART_Init+0xc4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8003c92:	2300      	movs	r3, #0
 8003c94:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69b9      	ldr	r1, [r7, #24]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fd7b 	bl	800379c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40011000 	.word	0x40011000
 8003cb4:	40004400 	.word	0x40004400
 8003cb8:	40011400 	.word	0x40011400

08003cbc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <LL_SetSystemCoreClock+0x1c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20002000 	.word	0x20002000

08003cdc <__NVIC_SetPriority>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	db0a      	blt.n	8003d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	490c      	ldr	r1, [pc, #48]	; (8003d28 <__NVIC_SetPriority+0x4c>)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	0112      	lsls	r2, r2, #4
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	440b      	add	r3, r1
 8003d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d04:	e00a      	b.n	8003d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <__NVIC_SetPriority+0x50>)
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	3b04      	subs	r3, #4
 8003d14:	0112      	lsls	r2, r2, #4
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	440b      	add	r3, r1
 8003d1a:	761a      	strb	r2, [r3, #24]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000e100 	.word	0xe000e100
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d34:	2100      	movs	r1, #0
 8003d36:	f06f 0004 	mvn.w	r0, #4
 8003d3a:	f7ff ffcf 	bl	8003cdc <__NVIC_SetPriority>
#endif
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4a:	f3ef 8305 	mrs	r3, IPSR
 8003d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d56:	f06f 0305 	mvn.w	r3, #5
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	e00c      	b.n	8003d78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <osKernelInitialize+0x44>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d105      	bne.n	8003d72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <osKernelInitialize+0x44>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	e002      	b.n	8003d78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d78:	687b      	ldr	r3, [r7, #4]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	200021d4 	.word	0x200021d4

08003d8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d92:	f3ef 8305 	mrs	r3, IPSR
 8003d96:	603b      	str	r3, [r7, #0]
  return(result);
 8003d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d9e:	f06f 0305 	mvn.w	r3, #5
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	e010      	b.n	8003dc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <osKernelStart+0x48>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d109      	bne.n	8003dc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003dae:	f7ff ffbf 	bl	8003d30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <osKernelStart+0x48>)
 8003db4:	2202      	movs	r2, #2
 8003db6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003db8:	f001 fcbc 	bl	8005734 <vTaskStartScheduler>
      stat = osOK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	e002      	b.n	8003dc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200021d4 	.word	0x200021d4

08003dd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08e      	sub	sp, #56	; 0x38
 8003ddc:	af04      	add	r7, sp, #16
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de8:	f3ef 8305 	mrs	r3, IPSR
 8003dec:	617b      	str	r3, [r7, #20]
  return(result);
 8003dee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d17e      	bne.n	8003ef2 <osThreadNew+0x11a>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d07b      	beq.n	8003ef2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003dfe:	2318      	movs	r3, #24
 8003e00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d045      	beq.n	8003e9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <osThreadNew+0x48>
        name = attr->name;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <osThreadNew+0x6e>
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b38      	cmp	r3, #56	; 0x38
 8003e38:	d805      	bhi.n	8003e46 <osThreadNew+0x6e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <osThreadNew+0x72>
        return (NULL);
 8003e46:	2300      	movs	r3, #0
 8003e48:	e054      	b.n	8003ef4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <osThreadNew+0xa8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2bbb      	cmp	r3, #187	; 0xbb
 8003e68:	d90a      	bls.n	8003e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d006      	beq.n	8003e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <osThreadNew+0xa8>
        mem = 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	e010      	b.n	8003ea2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10c      	bne.n	8003ea2 <osThreadNew+0xca>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d108      	bne.n	8003ea2 <osThreadNew+0xca>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <osThreadNew+0xca>
          mem = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e001      	b.n	8003ea2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d110      	bne.n	8003eca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003eb0:	9202      	str	r2, [sp, #8]
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6a3a      	ldr	r2, [r7, #32]
 8003ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f001 fa4c 	bl	800535c <xTaskCreateStatic>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e013      	b.n	8003ef2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d110      	bne.n	8003ef2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	f107 0310 	add.w	r3, r7, #16
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f001 fa97 	bl	8005416 <xTaskCreate>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d001      	beq.n	8003ef2 <osThreadNew+0x11a>
            hTask = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ef2:	693b      	ldr	r3, [r7, #16]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3728      	adds	r7, #40	; 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f04:	f3ef 8305 	mrs	r3, IPSR
 8003f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <osDelay+0x1c>
    stat = osErrorISR;
 8003f10:	f06f 0305 	mvn.w	r3, #5
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e007      	b.n	8003f28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f001 fbd2 	bl	80056cc <vTaskDelay>
    }
  }

  return (stat);
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b08a      	sub	sp, #40	; 0x28
 8003f36:	af02      	add	r7, sp, #8
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f42:	f3ef 8305 	mrs	r3, IPSR
 8003f46:	613b      	str	r3, [r7, #16]
  return(result);
 8003f48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d175      	bne.n	800403a <osSemaphoreNew+0x108>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d072      	beq.n	800403a <osSemaphoreNew+0x108>
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d86e      	bhi.n	800403a <osSemaphoreNew+0x108>
    mem = -1;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d015      	beq.n	8003f94 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d006      	beq.n	8003f7e <osSemaphoreNew+0x4c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b4f      	cmp	r3, #79	; 0x4f
 8003f76:	d902      	bls.n	8003f7e <osSemaphoreNew+0x4c>
        mem = 1;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e00c      	b.n	8003f98 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <osSemaphoreNew+0x66>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <osSemaphoreNew+0x66>
          mem = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	e001      	b.n	8003f98 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9e:	d04c      	beq.n	800403a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d128      	bne.n	8003ff8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10a      	bne.n	8003fc2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	9200      	str	r2, [sp, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	2001      	movs	r0, #1
 8003fba:	f000 fa29 	bl	8004410 <xQueueGenericCreateStatic>
 8003fbe:	61f8      	str	r0, [r7, #28]
 8003fc0:	e005      	b.n	8003fce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f000 fa9a 	bl	8004500 <xQueueGenericCreate>
 8003fcc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d022      	beq.n	800401a <osSemaphoreNew+0xe8>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01f      	beq.n	800401a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	69f8      	ldr	r0, [r7, #28]
 8003fe2:	f000 fb55 	bl	8004690 <xQueueGenericSend>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d016      	beq.n	800401a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003fec:	69f8      	ldr	r0, [r7, #28]
 8003fee:	f000 ffe1 	bl	8004fb4 <vQueueDelete>
            hSemaphore = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e010      	b.n	800401a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d108      	bne.n	8004010 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	461a      	mov	r2, r3
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fad7 	bl	80045ba <xQueueCreateCountingSemaphoreStatic>
 800400c:	61f8      	str	r0, [r7, #28]
 800400e:	e004      	b.n	800401a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fb08 	bl	8004628 <xQueueCreateCountingSemaphore>
 8004018:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <osSemaphoreNew+0xfc>
          name = attr->name;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e001      	b.n	8004032 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004032:	6979      	ldr	r1, [r7, #20]
 8004034:	69f8      	ldr	r0, [r7, #28]
 8004036:	f001 f909 	bl	800524c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800403a:	69fb      	ldr	r3, [r7, #28]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d103      	bne.n	8004064 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800405c:	f06f 0303 	mvn.w	r3, #3
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e039      	b.n	80040d8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004064:	f3ef 8305 	mrs	r3, IPSR
 8004068:	60fb      	str	r3, [r7, #12]
  return(result);
 800406a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800406c:	2b00      	cmp	r3, #0
 800406e:	d022      	beq.n	80040b6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004076:	f06f 0303 	mvn.w	r3, #3
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e02c      	b.n	80040d8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	461a      	mov	r2, r3
 8004088:	2100      	movs	r1, #0
 800408a:	6938      	ldr	r0, [r7, #16]
 800408c:	f000 ff12 	bl	8004eb4 <xQueueReceiveFromISR>
 8004090:	4603      	mov	r3, r0
 8004092:	2b01      	cmp	r3, #1
 8004094:	d003      	beq.n	800409e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004096:	f06f 0302 	mvn.w	r3, #2
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e01c      	b.n	80040d8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <osSemaphoreAcquire+0x94>
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <osSemaphoreAcquire+0xa0>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	e010      	b.n	80040d8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	6938      	ldr	r0, [r7, #16]
 80040ba:	f000 fdef 	bl	8004c9c <xQueueSemaphoreTake>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d009      	beq.n	80040d8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80040ca:	f06f 0301 	mvn.w	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e002      	b.n	80040d8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80040d2:	f06f 0302 	mvn.w	r3, #2
 80040d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80040d8:	697b      	ldr	r3, [r7, #20]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80040fe:	f06f 0303 	mvn.w	r3, #3
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e02c      	b.n	8004160 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004106:	f3ef 8305 	mrs	r3, IPSR
 800410a:	60fb      	str	r3, [r7, #12]
  return(result);
 800410c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01a      	beq.n	8004148 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	4619      	mov	r1, r3
 800411c:	6938      	ldr	r0, [r7, #16]
 800411e:	f000 fc50 	bl	80049c2 <xQueueGiveFromISR>
 8004122:	4603      	mov	r3, r0
 8004124:	2b01      	cmp	r3, #1
 8004126:	d003      	beq.n	8004130 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004128:	f06f 0302 	mvn.w	r3, #2
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e017      	b.n	8004160 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d014      	beq.n	8004160 <osSemaphoreRelease+0x78>
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <osSemaphoreRelease+0x84>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	e00b      	b.n	8004160 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004148:	2300      	movs	r3, #0
 800414a:	2200      	movs	r2, #0
 800414c:	2100      	movs	r1, #0
 800414e:	6938      	ldr	r0, [r7, #16]
 8004150:	f000 fa9e 	bl	8004690 <xQueueGenericSend>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d002      	beq.n	8004160 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800415a:	f06f 0302 	mvn.w	r3, #2
 800415e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004160:	697b      	ldr	r3, [r7, #20]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a07      	ldr	r2, [pc, #28]	; (800419c <vApplicationGetIdleTaskMemory+0x2c>)
 8004180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a06      	ldr	r2, [pc, #24]	; (80041a0 <vApplicationGetIdleTaskMemory+0x30>)
 8004186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2280      	movs	r2, #128	; 0x80
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	200021d8 	.word	0x200021d8
 80041a0:	20002294 	.word	0x20002294

080041a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80041b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <vApplicationGetTimerTaskMemory+0x30>)
 80041ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c2:	601a      	str	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20002494 	.word	0x20002494
 80041d4:	20002550 	.word	0x20002550

080041d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f103 0208 	add.w	r2, r3, #8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f103 0208 	add.w	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f103 0208 	add.w	r2, r3, #8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	601a      	str	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004290:	d103      	bne.n	800429a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e00c      	b.n	80042b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3308      	adds	r3, #8
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e002      	b.n	80042a8 <vListInsert+0x2e>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d2f6      	bcs.n	80042a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	601a      	str	r2, [r3, #0]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6892      	ldr	r2, [r2, #8]
 8004302:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6852      	ldr	r2, [r2, #4]
 800430c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d103      	bne.n	8004320 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	1e5a      	subs	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xQueueGenericReset+0x2a>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60bb      	str	r3, [r7, #8]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800436a:	f002 fc9b 	bl	8006ca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	441a      	add	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	3b01      	subs	r3, #1
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	22ff      	movs	r2, #255	; 0xff
 80043ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	22ff      	movs	r2, #255	; 0xff
 80043b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d114      	bne.n	80043ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01a      	beq.n	80043fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3310      	adds	r3, #16
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fc4b 	bl	8005c68 <xTaskRemoveFromEventList>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d012      	beq.n	80043fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <xQueueGenericReset+0xcc>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	e009      	b.n	80043fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3310      	adds	r3, #16
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fef2 	bl	80041d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3324      	adds	r3, #36	; 0x24
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff feed 	bl	80041d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043fe:	f002 fc81 	bl	8006d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004402:	2301      	movs	r3, #1
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08e      	sub	sp, #56	; 0x38
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <xQueueGenericCreateStatic+0x52>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <xQueueGenericCreateStatic+0x56>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <xQueueGenericCreateStatic+0x58>
 8004466:	2300      	movs	r3, #0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	623b      	str	r3, [r7, #32]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <xQueueGenericCreateStatic+0x7e>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <xQueueGenericCreateStatic+0x82>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <xQueueGenericCreateStatic+0x84>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	61fb      	str	r3, [r7, #28]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044ae:	2350      	movs	r3, #80	; 0x50
 80044b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b50      	cmp	r3, #80	; 0x50
 80044b6:	d00a      	beq.n	80044ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	61bb      	str	r3, [r7, #24]
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	4613      	mov	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f83f 	bl	8004574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3730      	adds	r7, #48	; 0x30
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	613b      	str	r3, [r7, #16]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	3350      	adds	r3, #80	; 0x50
 8004538:	4618      	mov	r0, r3
 800453a:	f002 fcd5 	bl	8006ee8 <pvPortMalloc>
 800453e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	3350      	adds	r3, #80	; 0x50
 800454e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004558:	79fa      	ldrb	r2, [r7, #7]
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f805 	bl	8004574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800456a:	69bb      	ldr	r3, [r7, #24]
	}
 800456c:	4618      	mov	r0, r3
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d103      	bne.n	8004590 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e002      	b.n	8004596 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045a2:	2101      	movs	r1, #1
 80045a4:	69b8      	ldr	r0, [r7, #24]
 80045a6:	f7ff fecb 	bl	8004340 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b08a      	sub	sp, #40	; 0x28
 80045be:	af02      	add	r7, sp, #8
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	61bb      	str	r3, [r7, #24]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d90a      	bls.n	8004600 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	617b      	str	r3, [r7, #20]
}
 80045fc:	bf00      	nop
 80045fe:	e7fe      	b.n	80045fe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004600:	2302      	movs	r3, #2
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	2100      	movs	r1, #0
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff ff00 	bl	8004410 <xQueueGenericCreateStatic>
 8004610:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800461e:	69fb      	ldr	r3, [r7, #28]
	}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	613b      	str	r3, [r7, #16]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d90a      	bls.n	800466c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800466c:	2202      	movs	r2, #2
 800466e:	2100      	movs	r1, #0
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ff45 	bl	8004500 <xQueueGenericCreate>
 8004676:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004684:	697b      	ldr	r3, [r7, #20]
	}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08e      	sub	sp, #56	; 0x38
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800469e:	2300      	movs	r3, #0
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueGenericSend+0x32>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <xQueueGenericSend+0x40>
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <xQueueGenericSend+0x44>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <xQueueGenericSend+0x46>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <xQueueGenericSend+0x60>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d103      	bne.n	80046fe <xQueueGenericSend+0x6e>
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <xQueueGenericSend+0x72>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <xQueueGenericSend+0x74>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xQueueGenericSend+0x8e>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	623b      	str	r3, [r7, #32]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800471e:	f001 fc65 	bl	8005fec <xTaskGetSchedulerState>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <xQueueGenericSend+0x9e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <xQueueGenericSend+0xa2>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <xQueueGenericSend+0xa4>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueGenericSend+0xbe>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	61fb      	str	r3, [r7, #28]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800474e:	f002 faa9 	bl	8006ca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <xQueueGenericSend+0xd4>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d129      	bne.n	80047b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476a:	f000 fc5e 	bl	800502a <prvCopyDataToQueue>
 800476e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	4618      	mov	r0, r3
 800477e:	f001 fa73 	bl	8005c68 <xTaskRemoveFromEventList>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004788:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <xQueueGenericSend+0x1f8>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	e00a      	b.n	80047b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047a0:	4b39      	ldr	r3, [pc, #228]	; (8004888 <xQueueGenericSend+0x1f8>)
 80047a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047b0:	f002 faa8 	bl	8006d04 <vPortExitCritical>
				return pdPASS;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e063      	b.n	8004880 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047be:	f002 faa1 	bl	8006d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e05c      	b.n	8004880 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 faad 	bl	8005d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047da:	f002 fa93 	bl	8006d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047de:	f001 f819 	bl	8005814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e2:	f002 fa5f 	bl	8006ca4 <vPortEnterCritical>
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f2:	d103      	bne.n	80047fc <xQueueGenericSend+0x16c>
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004802:	b25b      	sxtb	r3, r3
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004808:	d103      	bne.n	8004812 <xQueueGenericSend+0x182>
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004812:	f002 fa77 	bl	8006d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004816:	1d3a      	adds	r2, r7, #4
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f001 fa9c 	bl	8005d5c <xTaskCheckForTimeOut>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d124      	bne.n	8004874 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800482a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800482c:	f000 fcf5 	bl	800521a <prvIsQueueFull>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	3310      	adds	r3, #16
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f9c2 	bl	8005bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004846:	f000 fc80 	bl	800514a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800484a:	f000 fff1 	bl	8005830 <xTaskResumeAll>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f af7c 	bne.w	800474e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <xQueueGenericSend+0x1f8>)
 8004858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	e772      	b.n	800474e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800486a:	f000 fc6e 	bl	800514a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800486e:	f000 ffdf 	bl	8005830 <xTaskResumeAll>
 8004872:	e76c      	b.n	800474e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004876:	f000 fc68 	bl	800514a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487a:	f000 ffd9 	bl	8005830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800487e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004880:	4618      	mov	r0, r3
 8004882:	3738      	adds	r7, #56	; 0x38
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b090      	sub	sp, #64	; 0x40
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <xQueueGenericSendFromISR+0x3c>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <xQueueGenericSendFromISR+0x40>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <xQueueGenericSendFromISR+0x42>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSendFromISR+0x6a>
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <xQueueGenericSendFromISR+0x6e>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericSendFromISR+0x70>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	623b      	str	r3, [r7, #32]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004916:	f002 faa7 	bl	8006e68 <vPortValidateInterruptPriority>
	__asm volatile
 800491a:	f3ef 8211 	mrs	r2, BASEPRI
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	61fa      	str	r2, [r7, #28]
 8004930:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004932:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <xQueueGenericSendFromISR+0xbc>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d12f      	bne.n	80049a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800494e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800495e:	f000 fb64 	bl	800502a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004962:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800496a:	d112      	bne.n	8004992 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d016      	beq.n	80049a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	3324      	adds	r3, #36	; 0x24
 8004978:	4618      	mov	r0, r3
 800497a:	f001 f975 	bl	8005c68 <xTaskRemoveFromEventList>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e007      	b.n	80049a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004992:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004996:	3301      	adds	r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	b25a      	sxtb	r2, r3
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049a2:	2301      	movs	r3, #1
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049a6:	e001      	b.n	80049ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f383 8811 	msr	BASEPRI, r3
}
 80049b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3740      	adds	r7, #64	; 0x40
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b08e      	sub	sp, #56	; 0x38
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <xQueueGiveFromISR+0x2a>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	623b      	str	r3, [r7, #32]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <xQueueGiveFromISR+0x48>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	61fb      	str	r3, [r7, #28]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <xQueueGiveFromISR+0x58>
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <xQueueGiveFromISR+0x5c>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGiveFromISR+0x5e>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61bb      	str	r3, [r7, #24]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a3a:	f002 fa15 	bl	8006e68 <vPortValidateInterruptPriority>
	__asm volatile
 8004a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	617a      	str	r2, [r7, #20]
 8004a54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004a56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d22b      	bcs.n	8004ac2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a84:	d112      	bne.n	8004aac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	3324      	adds	r3, #36	; 0x24
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 f8e8 	bl	8005c68 <xTaskRemoveFromEventList>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00e      	beq.n	8004abc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00b      	beq.n	8004abc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e007      	b.n	8004abc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	b25a      	sxtb	r2, r3
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004abc:	2301      	movs	r3, #1
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac0:	e001      	b.n	8004ac6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f383 8811 	msr	BASEPRI, r3
}
 8004ad0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3738      	adds	r7, #56	; 0x38
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <xQueueReceive+0x30>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	623b      	str	r3, [r7, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <xQueueReceive+0x3e>
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <xQueueReceive+0x42>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <xQueueReceive+0x44>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <xQueueReceive+0x5e>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	61fb      	str	r3, [r7, #28]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b3a:	f001 fa57 	bl	8005fec <xTaskGetSchedulerState>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <xQueueReceive+0x6e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <xQueueReceive+0x72>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <xQueueReceive+0x74>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xQueueReceive+0x8e>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	61bb      	str	r3, [r7, #24]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b6a:	f002 f89b 	bl	8006ca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01f      	beq.n	8004bba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b7e:	f000 fabe 	bl	80050fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	1e5a      	subs	r2, r3, #1
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00f      	beq.n	8004bb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	3310      	adds	r3, #16
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 f866 	bl	8005c68 <xTaskRemoveFromEventList>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ba2:	4b3d      	ldr	r3, [pc, #244]	; (8004c98 <xQueueReceive+0x1bc>)
 8004ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bb2:	f002 f8a7 	bl	8006d04 <vPortExitCritical>
				return pdPASS;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e069      	b.n	8004c8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bc0:	f002 f8a0 	bl	8006d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e062      	b.n	8004c8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bce:	f107 0310 	add.w	r3, r7, #16
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 f8ac 	bl	8005d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bdc:	f002 f892 	bl	8006d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be0:	f000 fe18 	bl	8005814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004be4:	f002 f85e 	bl	8006ca4 <vPortEnterCritical>
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf4:	d103      	bne.n	8004bfe <xQueueReceive+0x122>
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0a:	d103      	bne.n	8004c14 <xQueueReceive+0x138>
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c14:	f002 f876 	bl	8006d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c18:	1d3a      	adds	r2, r7, #4
 8004c1a:	f107 0310 	add.w	r3, r7, #16
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f89b 	bl	8005d5c <xTaskCheckForTimeOut>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d123      	bne.n	8004c74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2e:	f000 fade 	bl	80051ee <prvIsQueueEmpty>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d017      	beq.n	8004c68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	3324      	adds	r3, #36	; 0x24
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 ffc1 	bl	8005bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c48:	f000 fa7f 	bl	800514a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c4c:	f000 fdf0 	bl	8005830 <xTaskResumeAll>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d189      	bne.n	8004b6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <xQueueReceive+0x1bc>)
 8004c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	e780      	b.n	8004b6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c6a:	f000 fa6e 	bl	800514a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c6e:	f000 fddf 	bl	8005830 <xTaskResumeAll>
 8004c72:	e77a      	b.n	8004b6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c76:	f000 fa68 	bl	800514a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c7a:	f000 fdd9 	bl	8005830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c80:	f000 fab5 	bl	80051ee <prvIsQueueEmpty>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f43f af6f 	beq.w	8004b6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3730      	adds	r7, #48	; 0x30
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	; 0x38
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61fb      	str	r3, [r7, #28]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cec:	f001 f97e 	bl	8005fec <xTaskGetSchedulerState>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <xQueueSemaphoreTake+0x60>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <xQueueSemaphoreTake+0x64>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <xQueueSemaphoreTake+0x66>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	61bb      	str	r3, [r7, #24]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d1c:	f001 ffc2 	bl	8006ca4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d024      	beq.n	8004d76 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d3c:	f001 facc 	bl	80062d8 <pvTaskIncrementMutexHeldCount>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00f      	beq.n	8004d6e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	3310      	adds	r3, #16
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 ff88 	bl	8005c68 <xTaskRemoveFromEventList>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d5e:	4b54      	ldr	r3, [pc, #336]	; (8004eb0 <xQueueSemaphoreTake+0x214>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d6e:	f001 ffc9 	bl	8006d04 <vPortExitCritical>
				return pdPASS;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e097      	b.n	8004ea6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d111      	bne.n	8004da0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	617b      	str	r3, [r7, #20]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d98:	f001 ffb4 	bl	8006d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e082      	b.n	8004ea6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004da6:	f107 030c 	add.w	r3, r7, #12
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 ffc0 	bl	8005d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004db4:	f001 ffa6 	bl	8006d04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004db8:	f000 fd2c 	bl	8005814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dbc:	f001 ff72 	bl	8006ca4 <vPortEnterCritical>
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dcc:	d103      	bne.n	8004dd6 <xQueueSemaphoreTake+0x13a>
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ddc:	b25b      	sxtb	r3, r3
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de2:	d103      	bne.n	8004dec <xQueueSemaphoreTake+0x150>
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dec:	f001 ff8a 	bl	8006d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004df0:	463a      	mov	r2, r7
 8004df2:	f107 030c 	add.w	r3, r7, #12
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 ffaf 	bl	8005d5c <xTaskCheckForTimeOut>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d132      	bne.n	8004e6a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e06:	f000 f9f2 	bl	80051ee <prvIsQueueEmpty>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d026      	beq.n	8004e5e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004e18:	f001 ff44 	bl	8006ca4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 f901 	bl	8006028 <xTaskPriorityInherit>
 8004e26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004e28:	f001 ff6c 	bl	8006d04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	3324      	adds	r3, #36	; 0x24
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fec7 	bl	8005bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e3c:	f000 f985 	bl	800514a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e40:	f000 fcf6 	bl	8005830 <xTaskResumeAll>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f47f af68 	bne.w	8004d1c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004e4c:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <xQueueSemaphoreTake+0x214>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	e75e      	b.n	8004d1c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e60:	f000 f973 	bl	800514a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e64:	f000 fce4 	bl	8005830 <xTaskResumeAll>
 8004e68:	e758      	b.n	8004d1c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e6c:	f000 f96d 	bl	800514a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e70:	f000 fcde 	bl	8005830 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e76:	f000 f9ba 	bl	80051ee <prvIsQueueEmpty>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f43f af4d 	beq.w	8004d1c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004e88:	f001 ff0c 	bl	8006ca4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e8e:	f000 f8b4 	bl	8004ffa <prvGetDisinheritPriorityAfterTimeout>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f99a 	bl	80061d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ea0:	f001 ff30 	bl	8006d04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3738      	adds	r7, #56	; 0x38
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08e      	sub	sp, #56	; 0x38
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	623b      	str	r3, [r7, #32]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <xQueueReceiveFromISR+0x3a>
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <xQueueReceiveFromISR+0x3e>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <xQueueReceiveFromISR+0x40>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	61fb      	str	r3, [r7, #28]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f0e:	f001 ffab 	bl	8006e68 <vPortValidateInterruptPriority>
	__asm volatile
 8004f12:	f3ef 8211 	mrs	r2, BASEPRI
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	61ba      	str	r2, [r7, #24]
 8004f28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02f      	beq.n	8004f9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f48:	f000 f8d9 	bl	80050fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5c:	d112      	bne.n	8004f84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	3310      	adds	r3, #16
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fe7c 	bl	8005c68 <xTaskRemoveFromEventList>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00e      	beq.n	8004f94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e007      	b.n	8004f94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f88:	3301      	adds	r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	b25a      	sxtb	r2, r3
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
 8004f98:	e001      	b.n	8004f9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f383 8811 	msr	BASEPRI, r3
}
 8004fa8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3738      	adds	r7, #56	; 0x38
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <vQueueDelete+0x28>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60bb      	str	r3, [r7, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f95f 	bl	80052a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f002 f847 	bl	8007080 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e001      	b.n	800501c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800501c:	68fb      	ldr	r3, [r7, #12]
	}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10d      	bne.n	8005064 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d14d      	bne.n	80050ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f001 f84f 	bl	80060f8 <xTaskPriorityDisinherit>
 800505a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	e043      	b.n	80050ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d119      	bne.n	800509e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6858      	ldr	r0, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	461a      	mov	r2, r3
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	f002 f94f 	bl	8007318 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	441a      	add	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	d32b      	bcc.n	80050ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	e026      	b.n	80050ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68d8      	ldr	r0, [r3, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	461a      	mov	r2, r3
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	f002 f935 	bl	8007318 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	425b      	negs	r3, r3
 80050b8:	441a      	add	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d207      	bcs.n	80050da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	425b      	negs	r3, r3
 80050d4:	441a      	add	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d105      	bne.n	80050ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050f4:	697b      	ldr	r3, [r7, #20]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d018      	beq.n	8005142 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	441a      	add	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	d303      	bcc.n	8005132 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68d9      	ldr	r1, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	461a      	mov	r2, r3
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f002 f8eb 	bl	8007318 <memcpy>
	}
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005152:	f001 fda7 	bl	8006ca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800515e:	e011      	b.n	8005184 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fd7b 	bl	8005c68 <xTaskRemoveFromEventList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005178:	f000 fe52 	bl	8005e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	3b01      	subs	r3, #1
 8005180:	b2db      	uxtb	r3, r3
 8005182:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005188:	2b00      	cmp	r3, #0
 800518a:	dce9      	bgt.n	8005160 <prvUnlockQueue+0x16>
 800518c:	e000      	b.n	8005190 <prvUnlockQueue+0x46>
					break;
 800518e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	22ff      	movs	r2, #255	; 0xff
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005198:	f001 fdb4 	bl	8006d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800519c:	f001 fd82 	bl	8006ca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051a8:	e011      	b.n	80051ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3310      	adds	r3, #16
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd56 	bl	8005c68 <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051c2:	f000 fe2d 	bl	8005e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051c6:	7bbb      	ldrb	r3, [r7, #14]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dce9      	bgt.n	80051aa <prvUnlockQueue+0x60>
 80051d6:	e000      	b.n	80051da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051e2:	f001 fd8f 	bl	8006d04 <vPortExitCritical>
}
 80051e6:	bf00      	nop
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051f6:	f001 fd55 	bl	8006ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005202:	2301      	movs	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e001      	b.n	800520c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800520c:	f001 fd7a 	bl	8006d04 <vPortExitCritical>

	return xReturn;
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005222:	f001 fd3f 	bl	8006ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	429a      	cmp	r2, r3
 8005230:	d102      	bne.n	8005238 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e001      	b.n	800523c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800523c:	f001 fd62 	bl	8006d04 <vPortExitCritical>

	return xReturn;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e014      	b.n	8005286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800525c:	4a0f      	ldr	r2, [pc, #60]	; (800529c <vQueueAddToRegistry+0x50>)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005268:	490c      	ldr	r1, [pc, #48]	; (800529c <vQueueAddToRegistry+0x50>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <vQueueAddToRegistry+0x50>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800527e:	e006      	b.n	800528e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b07      	cmp	r3, #7
 800528a:	d9e7      	bls.n	800525c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20002950 	.word	0x20002950

080052a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e016      	b.n	80052dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <vQueueUnregisterQueue+0x50>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d10b      	bne.n	80052d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80052be:	4a0c      	ldr	r2, [pc, #48]	; (80052f0 <vQueueUnregisterQueue+0x50>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2100      	movs	r1, #0
 80052c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <vQueueUnregisterQueue+0x50>)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	2200      	movs	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
				break;
 80052d4:	e006      	b.n	80052e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b07      	cmp	r3, #7
 80052e0:	d9e5      	bls.n	80052ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20002950 	.word	0x20002950

080052f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005304:	f001 fcce 	bl	8006ca4 <vPortEnterCritical>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530e:	b25b      	sxtb	r3, r3
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005314:	d103      	bne.n	800531e <vQueueWaitForMessageRestricted+0x2a>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532a:	d103      	bne.n	8005334 <vQueueWaitForMessageRestricted+0x40>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	f001 fce6 	bl	8006d04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fc61 	bl	8005c10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff fefb 	bl	800514a <prvUnlockQueue>
	}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	623b      	str	r3, [r7, #32]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61fb      	str	r3, [r7, #28]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053a2:	23bc      	movs	r3, #188	; 0xbc
 80053a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2bbc      	cmp	r3, #188	; 0xbc
 80053aa:	d00a      	beq.n	80053c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	61bb      	str	r3, [r7, #24]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01e      	beq.n	8005408 <xTaskCreateStatic+0xac>
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053e2:	2300      	movs	r3, #0
 80053e4:	9303      	str	r3, [sp, #12]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f850 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005402:	f000 f8f3 	bl	80055ec <prvAddNewTaskToReadyList>
 8005406:	e001      	b.n	800540c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800540c:	697b      	ldr	r3, [r7, #20]
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005416:	b580      	push	{r7, lr}
 8005418:	b08c      	sub	sp, #48	; 0x30
 800541a:	af04      	add	r7, sp, #16
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fd5c 	bl	8006ee8 <pvPortMalloc>
 8005430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005438:	20bc      	movs	r0, #188	; 0xbc
 800543a:	f001 fd55 	bl	8006ee8 <pvPortMalloc>
 800543e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
 800544c:	e005      	b.n	800545a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f001 fe16 	bl	8007080 <vPortFree>
 8005454:	e001      	b.n	800545a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d017      	beq.n	8005490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	2300      	movs	r3, #0
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f80e 	bl	80054a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005484:	69f8      	ldr	r0, [r7, #28]
 8005486:	f000 f8b1 	bl	80055ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e002      	b.n	8005496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005496:	69bb      	ldr	r3, [r7, #24]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	461a      	mov	r2, r3
 80054b8:	21a5      	movs	r1, #165	; 0xa5
 80054ba:	f001 ff3b 	bl	8007334 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054c8:	3b01      	subs	r3, #1
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f023 0307 	bic.w	r3, r3, #7
 80054d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	617b      	str	r3, [r7, #20]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01f      	beq.n	800553e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e012      	b.n	800552a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	7819      	ldrb	r1, [r3, #0]
 800550c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	3334      	adds	r3, #52	; 0x34
 8005514:	460a      	mov	r2, r1
 8005516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4413      	add	r3, r2
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	3301      	adds	r3, #1
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b0f      	cmp	r3, #15
 800552e:	d9e9      	bls.n	8005504 <prvInitialiseNewTask+0x64>
 8005530:	e000      	b.n	8005534 <prvInitialiseNewTask+0x94>
			{
				break;
 8005532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800553c:	e003      	b.n	8005546 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	2b37      	cmp	r3, #55	; 0x37
 800554a:	d901      	bls.n	8005550 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800554c:	2337      	movs	r3, #55	; 0x37
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005554:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fe56 	bl	8004218 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	3318      	adds	r3, #24
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fe51 	bl	8004218 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	2200      	movs	r2, #0
 8005598:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	3354      	adds	r3, #84	; 0x54
 80055a0:	2260      	movs	r2, #96	; 0x60
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 fec5 	bl	8007334 <memset>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <prvInitialiseNewTask+0x140>)
 80055ae:	659a      	str	r2, [r3, #88]	; 0x58
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <prvInitialiseNewTask+0x144>)
 80055b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <prvInitialiseNewTask+0x148>)
 80055ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	69b8      	ldr	r0, [r7, #24]
 80055c2:	f001 fa3f 	bl	8006a44 <pxPortInitialiseStack>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055d8:	bf00      	nop
 80055da:	3720      	adds	r7, #32
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	08007778 	.word	0x08007778
 80055e4:	08007798 	.word	0x08007798
 80055e8:	08007758 	.word	0x08007758

080055ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055f4:	f001 fb56 	bl	8006ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055f8:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <prvAddNewTaskToReadyList+0xc4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	4a2c      	ldr	r2, [pc, #176]	; (80056b0 <prvAddNewTaskToReadyList+0xc4>)
 8005600:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005602:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800560a:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <prvAddNewTaskToReadyList+0xc4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d110      	bne.n	800563a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005618:	f000 fc26 	bl	8005e68 <prvInitialiseTaskLists>
 800561c:	e00d      	b.n	800563a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800561e:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <prvAddNewTaskToReadyList+0xcc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005626:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d802      	bhi.n	800563a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800563a:	4b20      	ldr	r3, [pc, #128]	; (80056bc <prvAddNewTaskToReadyList+0xd0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <prvAddNewTaskToReadyList+0xd0>)
 8005642:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005644:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <prvAddNewTaskToReadyList+0xd0>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <prvAddNewTaskToReadyList+0xd4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d903      	bls.n	8005660 <prvAddNewTaskToReadyList+0x74>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <prvAddNewTaskToReadyList+0xd4>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <prvAddNewTaskToReadyList+0xd8>)
 800566e:	441a      	add	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7fe fddb 	bl	8004232 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800567c:	f001 fb42 	bl	8006d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005680:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <prvAddNewTaskToReadyList+0xcc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <prvAddNewTaskToReadyList+0xc8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	429a      	cmp	r2, r3
 8005694:	d207      	bcs.n	80056a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <prvAddNewTaskToReadyList+0xdc>)
 8005698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20002e64 	.word	0x20002e64
 80056b4:	20002990 	.word	0x20002990
 80056b8:	20002e70 	.word	0x20002e70
 80056bc:	20002e80 	.word	0x20002e80
 80056c0:	20002e6c 	.word	0x20002e6c
 80056c4:	20002994 	.word	0x20002994
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d017      	beq.n	800570e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <vTaskDelay+0x60>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <vTaskDelay+0x30>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60bb      	str	r3, [r7, #8]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056fc:	f000 f88a 	bl	8005814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005700:	2100      	movs	r1, #0
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fdfc 	bl	8006300 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005708:	f000 f892 	bl	8005830 <xTaskResumeAll>
 800570c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <vTaskDelay+0x64>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20002e8c 	.word	0x20002e8c
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005742:	463a      	mov	r2, r7
 8005744:	1d39      	adds	r1, r7, #4
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fd10 	bl	8004170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	9202      	str	r2, [sp, #8]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2300      	movs	r3, #0
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	460a      	mov	r2, r1
 8005762:	4924      	ldr	r1, [pc, #144]	; (80057f4 <vTaskStartScheduler+0xc0>)
 8005764:	4824      	ldr	r0, [pc, #144]	; (80057f8 <vTaskStartScheduler+0xc4>)
 8005766:	f7ff fdf9 	bl	800535c <xTaskCreateStatic>
 800576a:	4603      	mov	r3, r0
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <vTaskStartScheduler+0xc8>)
 800576e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005770:	4b22      	ldr	r3, [pc, #136]	; (80057fc <vTaskStartScheduler+0xc8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e001      	b.n	8005782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d102      	bne.n	800578e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005788:	f000 fe0e 	bl	80063a8 <xTimerCreateTimerTask>
 800578c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d11b      	bne.n	80057cc <vTaskStartScheduler+0x98>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	613b      	str	r3, [r7, #16]
}
 80057a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <vTaskStartScheduler+0xcc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3354      	adds	r3, #84	; 0x54
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <vTaskStartScheduler+0xd0>)
 80057b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <vTaskStartScheduler+0xd4>)
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ba:	4b14      	ldr	r3, [pc, #80]	; (800580c <vTaskStartScheduler+0xd8>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057c0:	4b13      	ldr	r3, [pc, #76]	; (8005810 <vTaskStartScheduler+0xdc>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057c6:	f001 f9cb 	bl	8006b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057ca:	e00e      	b.n	80057ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d2:	d10a      	bne.n	80057ea <vTaskStartScheduler+0xb6>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <vTaskStartScheduler+0xb4>
}
 80057ea:	bf00      	nop
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	08007678 	.word	0x08007678
 80057f8:	08005e39 	.word	0x08005e39
 80057fc:	20002e88 	.word	0x20002e88
 8005800:	20002990 	.word	0x20002990
 8005804:	20002010 	.word	0x20002010
 8005808:	20002e84 	.word	0x20002e84
 800580c:	20002e70 	.word	0x20002e70
 8005810:	20002e68 	.word	0x20002e68

08005814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <vTaskSuspendAll+0x18>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3301      	adds	r3, #1
 800581e:	4a03      	ldr	r2, [pc, #12]	; (800582c <vTaskSuspendAll+0x18>)
 8005820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	20002e8c 	.word	0x20002e8c

08005830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800583e:	4b42      	ldr	r3, [pc, #264]	; (8005948 <xTaskResumeAll+0x118>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <xTaskResumeAll+0x2c>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	603b      	str	r3, [r7, #0]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800585c:	f001 fa22 	bl	8006ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005860:	4b39      	ldr	r3, [pc, #228]	; (8005948 <xTaskResumeAll+0x118>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3b01      	subs	r3, #1
 8005866:	4a38      	ldr	r2, [pc, #224]	; (8005948 <xTaskResumeAll+0x118>)
 8005868:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586a:	4b37      	ldr	r3, [pc, #220]	; (8005948 <xTaskResumeAll+0x118>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d162      	bne.n	8005938 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005872:	4b36      	ldr	r3, [pc, #216]	; (800594c <xTaskResumeAll+0x11c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d05e      	beq.n	8005938 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800587a:	e02f      	b.n	80058dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587c:	4b34      	ldr	r3, [pc, #208]	; (8005950 <xTaskResumeAll+0x120>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3318      	adds	r3, #24
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe fd2f 	bl	80042ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3304      	adds	r3, #4
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe fd2a 	bl	80042ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <xTaskResumeAll+0x124>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d903      	bls.n	80058ac <xTaskResumeAll+0x7c>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <xTaskResumeAll+0x124>)
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4a27      	ldr	r2, [pc, #156]	; (8005958 <xTaskResumeAll+0x128>)
 80058ba:	441a      	add	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3304      	adds	r3, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f7fe fcb5 	bl	8004232 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	4b23      	ldr	r3, [pc, #140]	; (800595c <xTaskResumeAll+0x12c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <xTaskResumeAll+0x130>)
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058dc:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <xTaskResumeAll+0x120>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1cb      	bne.n	800587c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ea:	f000 fb5f 	bl	8005fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058ee:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <xTaskResumeAll+0x134>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d010      	beq.n	800591c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058fa:	f000 f847 	bl	800598c <xTaskIncrementTick>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <xTaskResumeAll+0x130>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3b01      	subs	r3, #1
 800590e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f1      	bne.n	80058fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005916:	4b13      	ldr	r3, [pc, #76]	; (8005964 <xTaskResumeAll+0x134>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800591c:	4b10      	ldr	r3, [pc, #64]	; (8005960 <xTaskResumeAll+0x130>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005924:	2301      	movs	r3, #1
 8005926:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005928:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <xTaskResumeAll+0x138>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005938:	f001 f9e4 	bl	8006d04 <vPortExitCritical>

	return xAlreadyYielded;
 800593c:	68bb      	ldr	r3, [r7, #8]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20002e8c 	.word	0x20002e8c
 800594c:	20002e64 	.word	0x20002e64
 8005950:	20002e24 	.word	0x20002e24
 8005954:	20002e6c 	.word	0x20002e6c
 8005958:	20002994 	.word	0x20002994
 800595c:	20002990 	.word	0x20002990
 8005960:	20002e78 	.word	0x20002e78
 8005964:	20002e74 	.word	0x20002e74
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <xTaskGetTickCount+0x1c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005978:	687b      	ldr	r3, [r7, #4]
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20002e68 	.word	0x20002e68

0800598c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005996:	4b4f      	ldr	r3, [pc, #316]	; (8005ad4 <xTaskIncrementTick+0x148>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 808f 	bne.w	8005abe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059a0:	4b4d      	ldr	r3, [pc, #308]	; (8005ad8 <xTaskIncrementTick+0x14c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3301      	adds	r3, #1
 80059a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059a8:	4a4b      	ldr	r2, [pc, #300]	; (8005ad8 <xTaskIncrementTick+0x14c>)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d120      	bne.n	80059f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059b4:	4b49      	ldr	r3, [pc, #292]	; (8005adc <xTaskIncrementTick+0x150>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	603b      	str	r3, [r7, #0]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <xTaskIncrementTick+0x46>
 80059d4:	4b41      	ldr	r3, [pc, #260]	; (8005adc <xTaskIncrementTick+0x150>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4b41      	ldr	r3, [pc, #260]	; (8005ae0 <xTaskIncrementTick+0x154>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3f      	ldr	r2, [pc, #252]	; (8005adc <xTaskIncrementTick+0x150>)
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	4a3f      	ldr	r2, [pc, #252]	; (8005ae0 <xTaskIncrementTick+0x154>)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	4b3e      	ldr	r3, [pc, #248]	; (8005ae4 <xTaskIncrementTick+0x158>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	4a3d      	ldr	r2, [pc, #244]	; (8005ae4 <xTaskIncrementTick+0x158>)
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	f000 fadb 	bl	8005fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059f6:	4b3c      	ldr	r3, [pc, #240]	; (8005ae8 <xTaskIncrementTick+0x15c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d349      	bcc.n	8005a94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a00:	4b36      	ldr	r3, [pc, #216]	; (8005adc <xTaskIncrementTick+0x150>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a0a:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <xTaskIncrementTick+0x15c>)
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a10:	601a      	str	r2, [r3, #0]
					break;
 8005a12:	e03f      	b.n	8005a94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a14:	4b31      	ldr	r3, [pc, #196]	; (8005adc <xTaskIncrementTick+0x150>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d203      	bcs.n	8005a34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ae8 <xTaskIncrementTick+0x15c>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a32:	e02f      	b.n	8005a94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fc57 	bl	80042ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	3318      	adds	r3, #24
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fc4e 	bl	80042ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4b25      	ldr	r3, [pc, #148]	; (8005aec <xTaskIncrementTick+0x160>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d903      	bls.n	8005a64 <xTaskIncrementTick+0xd8>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4a22      	ldr	r2, [pc, #136]	; (8005aec <xTaskIncrementTick+0x160>)
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <xTaskIncrementTick+0x164>)
 8005a72:	441a      	add	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f7fe fbd9 	bl	8004232 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <xTaskIncrementTick+0x168>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d3b8      	bcc.n	8005a00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a92:	e7b5      	b.n	8005a00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a94:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <xTaskIncrementTick+0x168>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9a:	4915      	ldr	r1, [pc, #84]	; (8005af0 <xTaskIncrementTick+0x164>)
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d901      	bls.n	8005ab0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ab0:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <xTaskIncrementTick+0x16c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e004      	b.n	8005ac8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <xTaskIncrementTick+0x170>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <xTaskIncrementTick+0x170>)
 8005ac6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ac8:	697b      	ldr	r3, [r7, #20]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20002e8c 	.word	0x20002e8c
 8005ad8:	20002e68 	.word	0x20002e68
 8005adc:	20002e1c 	.word	0x20002e1c
 8005ae0:	20002e20 	.word	0x20002e20
 8005ae4:	20002e7c 	.word	0x20002e7c
 8005ae8:	20002e84 	.word	0x20002e84
 8005aec:	20002e6c 	.word	0x20002e6c
 8005af0:	20002994 	.word	0x20002994
 8005af4:	20002990 	.word	0x20002990
 8005af8:	20002e78 	.word	0x20002e78
 8005afc:	20002e74 	.word	0x20002e74

08005b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b06:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <vTaskSwitchContext+0xb0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b0e:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <vTaskSwitchContext+0xb4>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b14:	e046      	b.n	8005ba4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005b16:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <vTaskSwitchContext+0xb4>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1c:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <vTaskSwitchContext+0xb8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e010      	b.n	8005b46 <vTaskSwitchContext+0x46>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <vTaskSwitchContext+0x3e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	491d      	ldr	r1, [pc, #116]	; (8005bbc <vTaskSwitchContext+0xbc>)
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0e4      	beq.n	8005b24 <vTaskSwitchContext+0x24>
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <vTaskSwitchContext+0xbc>)
 8005b66:	4413      	add	r3, r2
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d104      	bne.n	8005b8a <vTaskSwitchContext+0x8a>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <vTaskSwitchContext+0xc0>)
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <vTaskSwitchContext+0xb8>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <vTaskSwitchContext+0xc0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3354      	adds	r3, #84	; 0x54
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <vTaskSwitchContext+0xc4>)
 8005ba2:	6013      	str	r3, [r2, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20002e8c 	.word	0x20002e8c
 8005bb4:	20002e78 	.word	0x20002e78
 8005bb8:	20002e6c 	.word	0x20002e6c
 8005bbc:	20002994 	.word	0x20002994
 8005bc0:	20002990 	.word	0x20002990
 8005bc4:	20002010 	.word	0x20002010

08005bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60fb      	str	r3, [r7, #12]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bee:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <vTaskPlaceOnEventList+0x44>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fe fb3f 	bl	800427a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	6838      	ldr	r0, [r7, #0]
 8005c00:	f000 fb7e 	bl	8006300 <prvAddCurrentTaskToDelayedList>
}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20002990 	.word	0x20002990

08005c10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	617b      	str	r3, [r7, #20]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3318      	adds	r3, #24
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7fe faf6 	bl	8004232 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	f000 fb53 	bl	8006300 <prvAddCurrentTaskToDelayedList>
	}
 8005c5a:	bf00      	nop
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20002990 	.word	0x20002990

08005c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	3318      	adds	r3, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fb27 	bl	80042ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9e:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <xTaskRemoveFromEventList+0xb0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d11d      	bne.n	8005ce2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fb1e 	bl	80042ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <xTaskRemoveFromEventList+0xb4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <xTaskRemoveFromEventList+0x5c>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a16      	ldr	r2, [pc, #88]	; (8005d1c <xTaskRemoveFromEventList+0xb4>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <xTaskRemoveFromEventList+0xb8>)
 8005cd2:	441a      	add	r2, r3
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fe faa9 	bl	8004232 <vListInsertEnd>
 8005ce0:	e005      	b.n	8005cee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3318      	adds	r3, #24
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	480e      	ldr	r0, [pc, #56]	; (8005d24 <xTaskRemoveFromEventList+0xbc>)
 8005cea:	f7fe faa2 	bl	8004232 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <xTaskRemoveFromEventList+0xc0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d905      	bls.n	8005d08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <xTaskRemoveFromEventList+0xc4>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e001      	b.n	8005d0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d0c:	697b      	ldr	r3, [r7, #20]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20002e8c 	.word	0x20002e8c
 8005d1c:	20002e6c 	.word	0x20002e6c
 8005d20:	20002994 	.word	0x20002994
 8005d24:	20002e24 	.word	0x20002e24
 8005d28:	20002990 	.word	0x20002990
 8005d2c:	20002e78 	.word	0x20002e78

08005d30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <vTaskInternalSetTimeOutState+0x24>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <vTaskInternalSetTimeOutState+0x28>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	605a      	str	r2, [r3, #4]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20002e7c 	.word	0x20002e7c
 8005d58:	20002e68 	.word	0x20002e68

08005d5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	613b      	str	r3, [r7, #16]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	60fb      	str	r3, [r7, #12]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d9e:	f000 ff81 	bl	8006ca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005da2:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <xTaskCheckForTimeOut+0xbc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dba:	d102      	bne.n	8005dc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	e023      	b.n	8005e0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <xTaskCheckForTimeOut+0xc0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d007      	beq.n	8005dde <xTaskCheckForTimeOut+0x82>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d302      	bcc.n	8005dde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e015      	b.n	8005e0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d20b      	bcs.n	8005e00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad2      	subs	r2, r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ff9b 	bl	8005d30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	e004      	b.n	8005e0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e06:	2301      	movs	r3, #1
 8005e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e0a:	f000 ff7b 	bl	8006d04 <vPortExitCritical>

	return xReturn;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20002e68 	.word	0x20002e68
 8005e1c:	20002e7c 	.word	0x20002e7c

08005e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e24:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <vTaskMissedYield+0x14>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20002e78 	.word	0x20002e78

08005e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e40:	f000 f852 	bl	8005ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <prvIdleTask+0x28>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d9f9      	bls.n	8005e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <prvIdleTask+0x2c>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e5c:	e7f0      	b.n	8005e40 <prvIdleTask+0x8>
 8005e5e:	bf00      	nop
 8005e60:	20002994 	.word	0x20002994
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e6e:	2300      	movs	r3, #0
 8005e70:	607b      	str	r3, [r7, #4]
 8005e72:	e00c      	b.n	8005e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <prvInitialiseTaskLists+0x60>)
 8005e80:	4413      	add	r3, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe f9a8 	bl	80041d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b37      	cmp	r3, #55	; 0x37
 8005e92:	d9ef      	bls.n	8005e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e94:	480d      	ldr	r0, [pc, #52]	; (8005ecc <prvInitialiseTaskLists+0x64>)
 8005e96:	f7fe f99f 	bl	80041d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e9a:	480d      	ldr	r0, [pc, #52]	; (8005ed0 <prvInitialiseTaskLists+0x68>)
 8005e9c:	f7fe f99c 	bl	80041d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ea0:	480c      	ldr	r0, [pc, #48]	; (8005ed4 <prvInitialiseTaskLists+0x6c>)
 8005ea2:	f7fe f999 	bl	80041d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ea6:	480c      	ldr	r0, [pc, #48]	; (8005ed8 <prvInitialiseTaskLists+0x70>)
 8005ea8:	f7fe f996 	bl	80041d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005eac:	480b      	ldr	r0, [pc, #44]	; (8005edc <prvInitialiseTaskLists+0x74>)
 8005eae:	f7fe f993 	bl	80041d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <prvInitialiseTaskLists+0x78>)
 8005eb4:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <prvInitialiseTaskLists+0x64>)
 8005eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <prvInitialiseTaskLists+0x7c>)
 8005eba:	4a05      	ldr	r2, [pc, #20]	; (8005ed0 <prvInitialiseTaskLists+0x68>)
 8005ebc:	601a      	str	r2, [r3, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20002994 	.word	0x20002994
 8005ecc:	20002df4 	.word	0x20002df4
 8005ed0:	20002e08 	.word	0x20002e08
 8005ed4:	20002e24 	.word	0x20002e24
 8005ed8:	20002e38 	.word	0x20002e38
 8005edc:	20002e50 	.word	0x20002e50
 8005ee0:	20002e1c 	.word	0x20002e1c
 8005ee4:	20002e20 	.word	0x20002e20

08005ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eee:	e019      	b.n	8005f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ef0:	f000 fed8 	bl	8006ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef4:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <prvCheckTasksWaitingTermination+0x50>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe f9f3 	bl	80042ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f06:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <prvCheckTasksWaitingTermination+0x54>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	4a0b      	ldr	r2, [pc, #44]	; (8005f3c <prvCheckTasksWaitingTermination+0x54>)
 8005f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <prvCheckTasksWaitingTermination+0x58>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <prvCheckTasksWaitingTermination+0x58>)
 8005f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f1a:	f000 fef3 	bl	8006d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f810 	bl	8005f44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f24:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <prvCheckTasksWaitingTermination+0x58>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e1      	bne.n	8005ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20002e38 	.word	0x20002e38
 8005f3c:	20002e64 	.word	0x20002e64
 8005f40:	20002e4c 	.word	0x20002e4c

08005f44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3354      	adds	r3, #84	; 0x54
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fa51 	bl	80073f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d108      	bne.n	8005f72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f88b 	bl	8007080 <vPortFree>
				vPortFree( pxTCB );
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 f888 	bl	8007080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f70:	e018      	b.n	8005fa4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d103      	bne.n	8005f84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f87f 	bl	8007080 <vPortFree>
	}
 8005f82:	e00f      	b.n	8005fa4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d00a      	beq.n	8005fa4 <prvDeleteTCB+0x60>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60fb      	str	r3, [r7, #12]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <prvDeleteTCB+0x5e>
	}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <prvResetNextTaskUnblockTime+0x38>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fc4:	e008      	b.n	8005fd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <prvResetNextTaskUnblockTime+0x38>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fd6:	6013      	str	r3, [r2, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	20002e1c 	.word	0x20002e1c
 8005fe8:	20002e84 	.word	0x20002e84

08005fec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <xTaskGetSchedulerState+0x34>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	607b      	str	r3, [r7, #4]
 8005ffe:	e008      	b.n	8006012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006000:	4b08      	ldr	r3, [pc, #32]	; (8006024 <xTaskGetSchedulerState+0x38>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006008:	2302      	movs	r3, #2
 800600a:	607b      	str	r3, [r7, #4]
 800600c:	e001      	b.n	8006012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800600e:	2300      	movs	r3, #0
 8006010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006012:	687b      	ldr	r3, [r7, #4]
	}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20002e70 	.word	0x20002e70
 8006024:	20002e8c 	.word	0x20002e8c

08006028 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d051      	beq.n	80060e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <xTaskPriorityInherit+0xc4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	429a      	cmp	r2, r3
 800604a:	d241      	bcs.n	80060d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	db06      	blt.n	8006062 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006054:	4b25      	ldr	r3, [pc, #148]	; (80060ec <xTaskPriorityInherit+0xc4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6959      	ldr	r1, [r3, #20]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4a1f      	ldr	r2, [pc, #124]	; (80060f0 <xTaskPriorityInherit+0xc8>)
 8006074:	4413      	add	r3, r2
 8006076:	4299      	cmp	r1, r3
 8006078:	d122      	bne.n	80060c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe f934 	bl	80042ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006084:	4b19      	ldr	r3, [pc, #100]	; (80060ec <xTaskPriorityInherit+0xc4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <xTaskPriorityInherit+0xcc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d903      	bls.n	80060a2 <xTaskPriorityInherit+0x7a>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <xTaskPriorityInherit+0xcc>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <xTaskPriorityInherit+0xc8>)
 80060b0:	441a      	add	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7fe f8ba 	bl	8004232 <vListInsertEnd>
 80060be:	e004      	b.n	80060ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <xTaskPriorityInherit+0xc4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e008      	b.n	80060e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <xTaskPriorityInherit+0xc4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	429a      	cmp	r2, r3
 80060dc:	d201      	bcs.n	80060e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060de:	2301      	movs	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060e2:	68fb      	ldr	r3, [r7, #12]
	}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20002990 	.word	0x20002990
 80060f0:	20002994 	.word	0x20002994
 80060f4:	20002e6c 	.word	0x20002e6c

080060f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d056      	beq.n	80061bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <xTaskPriorityDisinherit+0xd0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	429a      	cmp	r2, r3
 8006116:	d00a      	beq.n	800612e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	60fb      	str	r3, [r7, #12]
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60bb      	str	r3, [r7, #8]
}
 8006148:	bf00      	nop
 800614a:	e7fe      	b.n	800614a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615e:	429a      	cmp	r2, r3
 8006160:	d02c      	beq.n	80061bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d128      	bne.n	80061bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe f8bc 	bl	80042ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <xTaskPriorityDisinherit+0xd4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <xTaskPriorityDisinherit+0xa4>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	4a0c      	ldr	r2, [pc, #48]	; (80061cc <xTaskPriorityDisinherit+0xd4>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <xTaskPriorityDisinherit+0xd8>)
 80061aa:	441a      	add	r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe f83d 	bl	8004232 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061bc:	697b      	ldr	r3, [r7, #20]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20002990 	.word	0x20002990
 80061cc:	20002e6c 	.word	0x20002e6c
 80061d0:	20002994 	.word	0x20002994

080061d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d06a      	beq.n	80062c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d902      	bls.n	800621a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e002      	b.n	8006220 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	429a      	cmp	r2, r3
 8006228:	d04b      	beq.n	80062c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	429a      	cmp	r2, r3
 8006232:	d146      	bne.n	80062c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	429a      	cmp	r2, r3
 800623c:	d10a      	bne.n	8006254 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60bb      	str	r3, [r7, #8]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	db04      	blt.n	8006272 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	6959      	ldr	r1, [r3, #20]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006282:	4413      	add	r3, r2
 8006284:	4299      	cmp	r1, r3
 8006286:	d11c      	bne.n	80062c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	3304      	adds	r3, #4
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe f82d 	bl	80042ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d903      	bls.n	80062a6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a07      	ldr	r2, [pc, #28]	; (80062d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80062b4:	441a      	add	r2, r3
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fd ffb8 	bl	8004232 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062c2:	bf00      	nop
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20002990 	.word	0x20002990
 80062d0:	20002994 	.word	0x20002994
 80062d4:	20002e6c 	.word	0x20002e6c

080062d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <pvTaskIncrementMutexHeldCount+0x24>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <pvTaskIncrementMutexHeldCount+0x24>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ea:	3201      	adds	r2, #1
 80062ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80062ee:	4b03      	ldr	r3, [pc, #12]	; (80062fc <pvTaskIncrementMutexHeldCount+0x24>)
 80062f0:	681b      	ldr	r3, [r3, #0]
	}
 80062f2:	4618      	mov	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20002990 	.word	0x20002990

08006300 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800630a:	4b21      	ldr	r3, [pc, #132]	; (8006390 <prvAddCurrentTaskToDelayedList+0x90>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006310:	4b20      	ldr	r3, [pc, #128]	; (8006394 <prvAddCurrentTaskToDelayedList+0x94>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3304      	adds	r3, #4
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd ffe8 	bl	80042ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006322:	d10a      	bne.n	800633a <prvAddCurrentTaskToDelayedList+0x3a>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800632a:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <prvAddCurrentTaskToDelayedList+0x94>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4819      	ldr	r0, [pc, #100]	; (8006398 <prvAddCurrentTaskToDelayedList+0x98>)
 8006334:	f7fd ff7d 	bl	8004232 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006338:	e026      	b.n	8006388 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006342:	4b14      	ldr	r3, [pc, #80]	; (8006394 <prvAddCurrentTaskToDelayedList+0x94>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	429a      	cmp	r2, r3
 8006350:	d209      	bcs.n	8006366 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <prvAddCurrentTaskToDelayedList+0x94>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7fd ff8b 	bl	800427a <vListInsert>
}
 8006364:	e010      	b.n	8006388 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <prvAddCurrentTaskToDelayedList+0x94>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fd ff81 	bl	800427a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	d202      	bcs.n	8006388 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006382:	4a08      	ldr	r2, [pc, #32]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6013      	str	r3, [r2, #0]
}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	20002e68 	.word	0x20002e68
 8006394:	20002990 	.word	0x20002990
 8006398:	20002e50 	.word	0x20002e50
 800639c:	20002e20 	.word	0x20002e20
 80063a0:	20002e1c 	.word	0x20002e1c
 80063a4:	20002e84 	.word	0x20002e84

080063a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80063b2:	f000 fb07 	bl	80069c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80063b6:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <xTimerCreateTimerTask+0x80>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d021      	beq.n	8006402 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80063c6:	1d3a      	adds	r2, r7, #4
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	f107 030c 	add.w	r3, r7, #12
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fd fee7 	bl	80041a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	9202      	str	r2, [sp, #8]
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	2302      	movs	r3, #2
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2300      	movs	r3, #0
 80063e6:	460a      	mov	r2, r1
 80063e8:	4910      	ldr	r1, [pc, #64]	; (800642c <xTimerCreateTimerTask+0x84>)
 80063ea:	4811      	ldr	r0, [pc, #68]	; (8006430 <xTimerCreateTimerTask+0x88>)
 80063ec:	f7fe ffb6 	bl	800535c <xTaskCreateStatic>
 80063f0:	4603      	mov	r3, r0
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <xTimerCreateTimerTask+0x8c>)
 80063f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <xTimerCreateTimerTask+0x8c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063fe:	2301      	movs	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	613b      	str	r3, [r7, #16]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20002ec0 	.word	0x20002ec0
 800642c:	08007680 	.word	0x08007680
 8006430:	0800656d 	.word	0x0800656d
 8006434:	20002ec4 	.word	0x20002ec4

08006438 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	623b      	str	r3, [r7, #32]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <xTimerGenericCommand+0x98>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02a      	beq.n	80064c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b05      	cmp	r3, #5
 800647e:	dc18      	bgt.n	80064b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006480:	f7ff fdb4 	bl	8005fec <xTaskGetSchedulerState>
 8006484:	4603      	mov	r3, r0
 8006486:	2b02      	cmp	r3, #2
 8006488:	d109      	bne.n	800649e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800648a:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <xTimerGenericCommand+0x98>)
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	f107 0110 	add.w	r1, r7, #16
 8006492:	2300      	movs	r3, #0
 8006494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006496:	f7fe f8fb 	bl	8004690 <xQueueGenericSend>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24
 800649c:	e012      	b.n	80064c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <xTimerGenericCommand+0x98>)
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	f107 0110 	add.w	r1, r7, #16
 80064a6:	2300      	movs	r3, #0
 80064a8:	2200      	movs	r2, #0
 80064aa:	f7fe f8f1 	bl	8004690 <xQueueGenericSend>
 80064ae:	6278      	str	r0, [r7, #36]	; 0x24
 80064b0:	e008      	b.n	80064c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <xTimerGenericCommand+0x98>)
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	f107 0110 	add.w	r1, r7, #16
 80064ba:	2300      	movs	r3, #0
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	f7fe f9e5 	bl	800488c <xQueueGenericSendFromISR>
 80064c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3728      	adds	r7, #40	; 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20002ec0 	.word	0x20002ec0

080064d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af02      	add	r7, sp, #8
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064de:	4b22      	ldr	r3, [pc, #136]	; (8006568 <prvProcessExpiredTimer+0x94>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fd fefd 	bl	80042ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d022      	beq.n	8006546 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	18d1      	adds	r1, r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	6978      	ldr	r0, [r7, #20]
 800650e:	f000 f8d1 	bl	80066b4 <prvInsertTimerInActiveList>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01f      	beq.n	8006558 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	2100      	movs	r1, #0
 8006522:	6978      	ldr	r0, [r7, #20]
 8006524:	f7ff ff88 	bl	8006438 <xTimerGenericCommand>
 8006528:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d113      	bne.n	8006558 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	6978      	ldr	r0, [r7, #20]
 800655e:	4798      	blx	r3
}
 8006560:	bf00      	nop
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20002eb8 	.word	0x20002eb8

0800656c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006574:	f107 0308 	add.w	r3, r7, #8
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f857 	bl	800662c <prvGetNextExpireTime>
 800657e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f803 	bl	8006590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800658a:	f000 f8d5 	bl	8006738 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800658e:	e7f1      	b.n	8006574 <prvTimerTask+0x8>

08006590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800659a:	f7ff f93b 	bl	8005814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800659e:	f107 0308 	add.w	r3, r7, #8
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f866 	bl	8006674 <prvSampleTimeNow>
 80065a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d130      	bne.n	8006612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <prvProcessTimerOrBlockTask+0x3c>
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d806      	bhi.n	80065cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065be:	f7ff f937 	bl	8005830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff85 	bl	80064d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065ca:	e024      	b.n	8006616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <prvProcessTimerOrBlockTask+0x90>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <prvProcessTimerOrBlockTask+0x50>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <prvProcessTimerOrBlockTask+0x52>
 80065e0:	2300      	movs	r3, #0
 80065e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <prvProcessTimerOrBlockTask+0x94>)
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	4619      	mov	r1, r3
 80065f2:	f7fe fe7f 	bl	80052f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80065f6:	f7ff f91b 	bl	8005830 <xTaskResumeAll>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <prvProcessTimerOrBlockTask+0x98>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
}
 8006610:	e001      	b.n	8006616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006612:	f7ff f90d 	bl	8005830 <xTaskResumeAll>
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20002ebc 	.word	0x20002ebc
 8006624:	20002ec0 	.word	0x20002ec0
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <prvGetNextExpireTime+0x44>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <prvGetNextExpireTime+0x16>
 800663e:	2201      	movs	r2, #1
 8006640:	e000      	b.n	8006644 <prvGetNextExpireTime+0x18>
 8006642:	2200      	movs	r2, #0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <prvGetNextExpireTime+0x44>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e001      	b.n	8006660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006660:	68fb      	ldr	r3, [r7, #12]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20002eb8 	.word	0x20002eb8

08006674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800667c:	f7ff f976 	bl	800596c <xTaskGetTickCount>
 8006680:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006682:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <prvSampleTimeNow+0x3c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d205      	bcs.n	8006698 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800668c:	f000 f936 	bl	80068fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e002      	b.n	800669e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800669e:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <prvSampleTimeNow+0x3c>)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066a4:	68fb      	ldr	r3, [r7, #12]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20002ec8 	.word	0x20002ec8

080066b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d812      	bhi.n	8006700 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d302      	bcc.n	80066ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e01b      	b.n	8006726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066ee:	4b10      	ldr	r3, [pc, #64]	; (8006730 <prvInsertTimerInActiveList+0x7c>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fd fdbe 	bl	800427a <vListInsert>
 80066fe:	e012      	b.n	8006726 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d206      	bcs.n	8006716 <prvInsertTimerInActiveList+0x62>
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d302      	bcc.n	8006716 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006710:	2301      	movs	r3, #1
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e007      	b.n	8006726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006716:	4b07      	ldr	r3, [pc, #28]	; (8006734 <prvInsertTimerInActiveList+0x80>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fd fdaa 	bl	800427a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006726:	697b      	ldr	r3, [r7, #20]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20002ebc 	.word	0x20002ebc
 8006734:	20002eb8 	.word	0x20002eb8

08006738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08e      	sub	sp, #56	; 0x38
 800673c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800673e:	e0ca      	b.n	80068d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da18      	bge.n	8006778 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006746:	1d3b      	adds	r3, r7, #4
 8006748:	3304      	adds	r3, #4
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	61fb      	str	r3, [r7, #28]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800676e:	6850      	ldr	r0, [r2, #4]
 8006770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006772:	6892      	ldr	r2, [r2, #8]
 8006774:	4611      	mov	r1, r2
 8006776:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f2c0 80aa 	blt.w	80068d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	3304      	adds	r3, #4
 8006790:	4618      	mov	r0, r3
 8006792:	f7fd fdab 	bl	80042ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006796:	463b      	mov	r3, r7
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff ff6b 	bl	8006674 <prvSampleTimeNow>
 800679e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b09      	cmp	r3, #9
 80067a4:	f200 8097 	bhi.w	80068d6 <prvProcessReceivedCommands+0x19e>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <prvProcessReceivedCommands+0x78>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067d9 	.word	0x080067d9
 80067bc:	0800684d 	.word	0x0800684d
 80067c0:	08006861 	.word	0x08006861
 80067c4:	080068ab 	.word	0x080068ab
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067d9 	.word	0x080067d9
 80067d0:	0800684d 	.word	0x0800684d
 80067d4:	08006861 	.word	0x08006861
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	18d1      	adds	r1, r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f8:	f7ff ff5c 	bl	80066b4 <prvInsertTimerInActiveList>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d069      	beq.n	80068d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006808:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d05e      	beq.n	80068d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	441a      	add	r2, r3
 8006820:	2300      	movs	r3, #0
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	2300      	movs	r3, #0
 8006826:	2100      	movs	r1, #0
 8006828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800682a:	f7ff fe05 	bl	8006438 <xTimerGenericCommand>
 800682e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d14f      	bne.n	80068d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	61bb      	str	r3, [r7, #24]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800685e:	e03a      	b.n	80068d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	617b      	str	r3, [r7, #20]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	18d1      	adds	r1, r2, r3
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068a4:	f7ff ff06 	bl	80066b4 <prvInsertTimerInActiveList>
					break;
 80068a8:	e015      	b.n	80068d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80068b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ba:	f000 fbe1 	bl	8007080 <vPortFree>
 80068be:	e00a      	b.n	80068d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068d2:	e000      	b.n	80068d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <prvProcessReceivedCommands+0x1c0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1d39      	adds	r1, r7, #4
 80068dc:	2200      	movs	r2, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe f8fc 	bl	8004adc <xQueueReceive>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f47f af2a 	bne.w	8006740 <prvProcessReceivedCommands+0x8>
	}
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	3730      	adds	r7, #48	; 0x30
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20002ec0 	.word	0x20002ec0

080068fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006902:	e048      	b.n	8006996 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006904:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <prvSwitchTimerLists+0xc0>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800690e:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <prvSwitchTimerLists+0xc0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3304      	adds	r3, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f7fd fce5 	bl	80042ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d02e      	beq.n	8006996 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4413      	add	r3, r2
 8006940:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	429a      	cmp	r2, r3
 8006948:	d90e      	bls.n	8006968 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006956:	4b19      	ldr	r3, [pc, #100]	; (80069bc <prvSwitchTimerLists+0xc0>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3304      	adds	r3, #4
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f7fd fc8a 	bl	800427a <vListInsert>
 8006966:	e016      	b.n	8006996 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006968:	2300      	movs	r3, #0
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	2300      	movs	r3, #0
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	2100      	movs	r1, #0
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fd60 	bl	8006438 <xTimerGenericCommand>
 8006978:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	603b      	str	r3, [r7, #0]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <prvSwitchTimerLists+0xc0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1b1      	bne.n	8006904 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <prvSwitchTimerLists+0xc0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069a6:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <prvSwitchTimerLists+0xc4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a04      	ldr	r2, [pc, #16]	; (80069bc <prvSwitchTimerLists+0xc0>)
 80069ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069ae:	4a04      	ldr	r2, [pc, #16]	; (80069c0 <prvSwitchTimerLists+0xc4>)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	6013      	str	r3, [r2, #0]
}
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20002eb8 	.word	0x20002eb8
 80069c0:	20002ebc 	.word	0x20002ebc

080069c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069ca:	f000 f96b 	bl	8006ca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <prvCheckForValidListAndQueue+0x60>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d120      	bne.n	8006a18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069d6:	4814      	ldr	r0, [pc, #80]	; (8006a28 <prvCheckForValidListAndQueue+0x64>)
 80069d8:	f7fd fbfe 	bl	80041d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069dc:	4813      	ldr	r0, [pc, #76]	; (8006a2c <prvCheckForValidListAndQueue+0x68>)
 80069de:	f7fd fbfb 	bl	80041d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069e2:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <prvCheckForValidListAndQueue+0x6c>)
 80069e4:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <prvCheckForValidListAndQueue+0x64>)
 80069e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <prvCheckForValidListAndQueue+0x70>)
 80069ea:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <prvCheckForValidListAndQueue+0x68>)
 80069ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069ee:	2300      	movs	r3, #0
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <prvCheckForValidListAndQueue+0x74>)
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <prvCheckForValidListAndQueue+0x78>)
 80069f6:	2110      	movs	r1, #16
 80069f8:	200a      	movs	r0, #10
 80069fa:	f7fd fd09 	bl	8004410 <xQueueGenericCreateStatic>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <prvCheckForValidListAndQueue+0x60>)
 8006a02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <prvCheckForValidListAndQueue+0x60>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <prvCheckForValidListAndQueue+0x60>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	490b      	ldr	r1, [pc, #44]	; (8006a40 <prvCheckForValidListAndQueue+0x7c>)
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fc1a 	bl	800524c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a18:	f000 f974 	bl	8006d04 <vPortExitCritical>
}
 8006a1c:	bf00      	nop
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20002ec0 	.word	0x20002ec0
 8006a28:	20002e90 	.word	0x20002e90
 8006a2c:	20002ea4 	.word	0x20002ea4
 8006a30:	20002eb8 	.word	0x20002eb8
 8006a34:	20002ebc 	.word	0x20002ebc
 8006a38:	20002f6c 	.word	0x20002f6c
 8006a3c:	20002ecc 	.word	0x20002ecc
 8006a40:	08007688 	.word	0x08007688

08006a44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3b04      	subs	r3, #4
 8006a54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3b04      	subs	r3, #4
 8006a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f023 0201 	bic.w	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3b04      	subs	r3, #4
 8006a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a74:	4a0c      	ldr	r2, [pc, #48]	; (8006aa8 <pxPortInitialiseStack+0x64>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3b14      	subs	r3, #20
 8006a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3b04      	subs	r3, #4
 8006a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f06f 0202 	mvn.w	r2, #2
 8006a92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3b20      	subs	r3, #32
 8006a98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	08006aad 	.word	0x08006aad

08006aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ab6:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <prvTaskExitError+0x54>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006abe:	d00a      	beq.n	8006ad6 <prvTaskExitError+0x2a>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <prvTaskExitError+0x28>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	60bb      	str	r3, [r7, #8]
}
 8006ae8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006aea:	bf00      	nop
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0fc      	beq.n	8006aec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	2000200c 	.word	0x2000200c
	...

08006b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <pxCurrentTCBConst2>)
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6808      	ldr	r0, [r1, #0]
 8006b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	f380 8809 	msr	PSP, r0
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	4770      	bx	lr
 8006b2c:	f3af 8000 	nop.w

08006b30 <pxCurrentTCBConst2>:
 8006b30:	20002990 	.word	0x20002990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b38:	4808      	ldr	r0, [pc, #32]	; (8006b5c <prvPortStartFirstTask+0x24>)
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	6800      	ldr	r0, [r0, #0]
 8006b3e:	f380 8808 	msr	MSP, r0
 8006b42:	f04f 0000 	mov.w	r0, #0
 8006b46:	f380 8814 	msr	CONTROL, r0
 8006b4a:	b662      	cpsie	i
 8006b4c:	b661      	cpsie	f
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	df00      	svc	0
 8006b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b5a:	bf00      	nop
 8006b5c:	e000ed08 	.word	0xe000ed08

08006b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b66:	4b46      	ldr	r3, [pc, #280]	; (8006c80 <xPortStartScheduler+0x120>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a46      	ldr	r2, [pc, #280]	; (8006c84 <xPortStartScheduler+0x124>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10a      	bne.n	8006b86 <xPortStartScheduler+0x26>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	613b      	str	r3, [r7, #16]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b86:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <xPortStartScheduler+0x120>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a3f      	ldr	r2, [pc, #252]	; (8006c88 <xPortStartScheduler+0x128>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d10a      	bne.n	8006ba6 <xPortStartScheduler+0x46>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ba6:	4b39      	ldr	r3, [pc, #228]	; (8006c8c <xPortStartScheduler+0x12c>)
 8006ba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	22ff      	movs	r2, #255	; 0xff
 8006bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <xPortStartScheduler+0x130>)
 8006bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bce:	4b31      	ldr	r3, [pc, #196]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bd0:	2207      	movs	r2, #7
 8006bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bd4:	e009      	b.n	8006bea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006bd6:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b80      	cmp	r3, #128	; 0x80
 8006bf4:	d0ef      	beq.n	8006bd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bf6:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f1c3 0307 	rsb	r3, r3, #7
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d00a      	beq.n	8006c18 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60bb      	str	r3, [r7, #8]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c2a:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c36:	4b18      	ldr	r3, [pc, #96]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a17      	ldr	r2, [pc, #92]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c42:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a14      	ldr	r2, [pc, #80]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c4e:	f000 f8dd 	bl	8006e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <xPortStartScheduler+0x13c>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c58:	f000 f8fc 	bl	8006e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <xPortStartScheduler+0x140>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a0f      	ldr	r2, [pc, #60]	; (8006ca0 <xPortStartScheduler+0x140>)
 8006c62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c68:	f7ff ff66 	bl	8006b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c6c:	f7fe ff48 	bl	8005b00 <vTaskSwitchContext>
	prvTaskExitError();
 8006c70:	f7ff ff1c 	bl	8006aac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	e000ed00 	.word	0xe000ed00
 8006c84:	410fc271 	.word	0x410fc271
 8006c88:	410fc270 	.word	0x410fc270
 8006c8c:	e000e400 	.word	0xe000e400
 8006c90:	20002fbc 	.word	0x20002fbc
 8006c94:	20002fc0 	.word	0x20002fc0
 8006c98:	e000ed20 	.word	0xe000ed20
 8006c9c:	2000200c 	.word	0x2000200c
 8006ca0:	e000ef34 	.word	0xe000ef34

08006ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	607b      	str	r3, [r7, #4]
}
 8006cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <vPortEnterCritical+0x58>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	4a0d      	ldr	r2, [pc, #52]	; (8006cfc <vPortEnterCritical+0x58>)
 8006cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <vPortEnterCritical+0x58>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d10f      	bne.n	8006cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <vPortEnterCritical+0x5c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	603b      	str	r3, [r7, #0]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <vPortEnterCritical+0x4a>
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	2000200c 	.word	0x2000200c
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <vPortExitCritical+0x50>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <vPortExitCritical+0x24>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	607b      	str	r3, [r7, #4]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <vPortExitCritical+0x50>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <vPortExitCritical+0x50>)
 8006d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <vPortExitCritical+0x50>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <vPortExitCritical+0x42>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f383 8811 	msr	BASEPRI, r3
}
 8006d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	2000200c 	.word	0x2000200c
	...

08006d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d60:	f3ef 8009 	mrs	r0, PSP
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <pxCurrentTCBConst>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f01e 0f10 	tst.w	lr, #16
 8006d70:	bf08      	it	eq
 8006d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	6010      	str	r0, [r2, #0]
 8006d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d84:	f380 8811 	msr	BASEPRI, r0
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f7fe feb6 	bl	8005b00 <vTaskSwitchContext>
 8006d94:	f04f 0000 	mov.w	r0, #0
 8006d98:	f380 8811 	msr	BASEPRI, r0
 8006d9c:	bc09      	pop	{r0, r3}
 8006d9e:	6819      	ldr	r1, [r3, #0]
 8006da0:	6808      	ldr	r0, [r1, #0]
 8006da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da6:	f01e 0f10 	tst.w	lr, #16
 8006daa:	bf08      	it	eq
 8006dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006db0:	f380 8809 	msr	PSP, r0
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst>:
 8006dc0:	20002990 	.word	0x20002990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
}
 8006de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006de2:	f7fe fdd3 	bl	800598c <xTaskIncrementTick>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <xPortSysTickHandler+0x40>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	2300      	movs	r3, #0
 8006df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	f383 8811 	msr	BASEPRI, r3
}
 8006dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <vPortSetupTimerInterrupt+0x34>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <vPortSetupTimerInterrupt+0x38>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <vPortSetupTimerInterrupt+0x3c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <vPortSetupTimerInterrupt+0x40>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	099b      	lsrs	r3, r3, #6
 8006e28:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <vPortSetupTimerInterrupt+0x44>)
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e2e:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <vPortSetupTimerInterrupt+0x34>)
 8006e30:	2207      	movs	r2, #7
 8006e32:	601a      	str	r2, [r3, #0]
}
 8006e34:	bf00      	nop
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	e000e010 	.word	0xe000e010
 8006e44:	e000e018 	.word	0xe000e018
 8006e48:	20002000 	.word	0x20002000
 8006e4c:	10624dd3 	.word	0x10624dd3
 8006e50:	e000e014 	.word	0xe000e014

08006e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e64 <vPortEnableVFP+0x10>
 8006e58:	6801      	ldr	r1, [r0, #0]
 8006e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e5e:	6001      	str	r1, [r0, #0]
 8006e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e62:	bf00      	nop
 8006e64:	e000ed88 	.word	0xe000ed88

08006e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e6e:	f3ef 8305 	mrs	r3, IPSR
 8006e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b0f      	cmp	r3, #15
 8006e78:	d914      	bls.n	8006ea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e7a:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <vPortValidateInterruptPriority+0x70>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e84:	4b15      	ldr	r3, [pc, #84]	; (8006edc <vPortValidateInterruptPriority+0x74>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	7afa      	ldrb	r2, [r7, #11]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d20a      	bcs.n	8006ea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <vPortValidateInterruptPriority+0x78>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006eac:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <vPortValidateInterruptPriority+0x7c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d90a      	bls.n	8006eca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	603b      	str	r3, [r7, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <vPortValidateInterruptPriority+0x60>
	}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	e000e3f0 	.word	0xe000e3f0
 8006edc:	20002fbc 	.word	0x20002fbc
 8006ee0:	e000ed0c 	.word	0xe000ed0c
 8006ee4:	20002fc0 	.word	0x20002fc0

08006ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08a      	sub	sp, #40	; 0x28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ef4:	f7fe fc8e 	bl	8005814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ef8:	4b5b      	ldr	r3, [pc, #364]	; (8007068 <pvPortMalloc+0x180>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f00:	f000 f920 	bl	8007144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f04:	4b59      	ldr	r3, [pc, #356]	; (800706c <pvPortMalloc+0x184>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f040 8093 	bne.w	8007038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01d      	beq.n	8006f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f18:	2208      	movs	r2, #8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d014      	beq.n	8006f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f023 0307 	bic.w	r3, r3, #7
 8006f30:	3308      	adds	r3, #8
 8006f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <pvPortMalloc+0x6c>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	617b      	str	r3, [r7, #20]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d06e      	beq.n	8007038 <pvPortMalloc+0x150>
 8006f5a:	4b45      	ldr	r3, [pc, #276]	; (8007070 <pvPortMalloc+0x188>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d869      	bhi.n	8007038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f64:	4b43      	ldr	r3, [pc, #268]	; (8007074 <pvPortMalloc+0x18c>)
 8006f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f68:	4b42      	ldr	r3, [pc, #264]	; (8007074 <pvPortMalloc+0x18c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f6e:	e004      	b.n	8006f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d903      	bls.n	8006f8c <pvPortMalloc+0xa4>
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f1      	bne.n	8006f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f8c:	4b36      	ldr	r3, [pc, #216]	; (8007068 <pvPortMalloc+0x180>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d050      	beq.n	8007038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	4413      	add	r3, r2
 8006f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d91f      	bls.n	8006ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	613b      	str	r3, [r7, #16]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	1ad2      	subs	r2, r2, r3
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ff2:	69b8      	ldr	r0, [r7, #24]
 8006ff4:	f000 f908 	bl	8007208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <pvPortMalloc+0x188>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	4a1b      	ldr	r2, [pc, #108]	; (8007070 <pvPortMalloc+0x188>)
 8007004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007006:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <pvPortMalloc+0x188>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <pvPortMalloc+0x190>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d203      	bcs.n	800701a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007012:	4b17      	ldr	r3, [pc, #92]	; (8007070 <pvPortMalloc+0x188>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a18      	ldr	r2, [pc, #96]	; (8007078 <pvPortMalloc+0x190>)
 8007018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	4b13      	ldr	r3, [pc, #76]	; (800706c <pvPortMalloc+0x184>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	431a      	orrs	r2, r3
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <pvPortMalloc+0x194>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3301      	adds	r3, #1
 8007034:	4a11      	ldr	r2, [pc, #68]	; (800707c <pvPortMalloc+0x194>)
 8007036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007038:	f7fe fbfa 	bl	8005830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <pvPortMalloc+0x174>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	60fb      	str	r3, [r7, #12]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <pvPortMalloc+0x172>
	return pvReturn;
 800705c:	69fb      	ldr	r3, [r7, #28]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3728      	adds	r7, #40	; 0x28
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20006bcc 	.word	0x20006bcc
 800706c:	20006be0 	.word	0x20006be0
 8007070:	20006bd0 	.word	0x20006bd0
 8007074:	20006bc4 	.word	0x20006bc4
 8007078:	20006bd4 	.word	0x20006bd4
 800707c:	20006bd8 	.word	0x20006bd8

08007080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d04d      	beq.n	800712e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007092:	2308      	movs	r3, #8
 8007094:	425b      	negs	r3, r3
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4413      	add	r3, r2
 800709a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	4b24      	ldr	r3, [pc, #144]	; (8007138 <vPortFree+0xb8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4013      	ands	r3, r2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <vPortFree+0x44>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60fb      	str	r3, [r7, #12]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <vPortFree+0x62>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	60bb      	str	r3, [r7, #8]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	4b14      	ldr	r3, [pc, #80]	; (8007138 <vPortFree+0xb8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4013      	ands	r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01e      	beq.n	800712e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d11a      	bne.n	800712e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <vPortFree+0xb8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	43db      	mvns	r3, r3
 8007102:	401a      	ands	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007108:	f7fe fb84 	bl	8005814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <vPortFree+0xbc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4413      	add	r3, r2
 8007116:	4a09      	ldr	r2, [pc, #36]	; (800713c <vPortFree+0xbc>)
 8007118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800711a:	6938      	ldr	r0, [r7, #16]
 800711c:	f000 f874 	bl	8007208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007120:	4b07      	ldr	r3, [pc, #28]	; (8007140 <vPortFree+0xc0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	4a06      	ldr	r2, [pc, #24]	; (8007140 <vPortFree+0xc0>)
 8007128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800712a:	f7fe fb81 	bl	8005830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800712e:	bf00      	nop
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20006be0 	.word	0x20006be0
 800713c:	20006bd0 	.word	0x20006bd0
 8007140:	20006bdc 	.word	0x20006bdc

08007144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800714a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800714e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007150:	4b27      	ldr	r3, [pc, #156]	; (80071f0 <prvHeapInit+0xac>)
 8007152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3307      	adds	r3, #7
 8007162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0307 	bic.w	r3, r3, #7
 800716a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	4a1f      	ldr	r2, [pc, #124]	; (80071f0 <prvHeapInit+0xac>)
 8007174:	4413      	add	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800717c:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <prvHeapInit+0xb0>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007182:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <prvHeapInit+0xb0>)
 8007184:	2200      	movs	r2, #0
 8007186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	4413      	add	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007190:	2208      	movs	r2, #8
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4a15      	ldr	r2, [pc, #84]	; (80071f8 <prvHeapInit+0xb4>)
 80071a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <prvHeapInit+0xb4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071ae:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <prvHeapInit+0xb4>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071c4:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <prvHeapInit+0xb4>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <prvHeapInit+0xb8>)
 80071d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	4a09      	ldr	r2, [pc, #36]	; (8007200 <prvHeapInit+0xbc>)
 80071da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <prvHeapInit+0xc0>)
 80071de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071e2:	601a      	str	r2, [r3, #0]
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	20002fc4 	.word	0x20002fc4
 80071f4:	20006bc4 	.word	0x20006bc4
 80071f8:	20006bcc 	.word	0x20006bcc
 80071fc:	20006bd4 	.word	0x20006bd4
 8007200:	20006bd0 	.word	0x20006bd0
 8007204:	20006be0 	.word	0x20006be0

08007208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007210:	4b28      	ldr	r3, [pc, #160]	; (80072b4 <prvInsertBlockIntoFreeList+0xac>)
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	e002      	b.n	800721c <prvInsertBlockIntoFreeList+0x14>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	429a      	cmp	r2, r3
 8007224:	d8f7      	bhi.n	8007216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4413      	add	r3, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d108      	bne.n	800724a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	441a      	add	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	441a      	add	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d118      	bne.n	8007290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d00d      	beq.n	8007286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	441a      	add	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e008      	b.n	8007298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	e003      	b.n	8007298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	d002      	beq.n	80072a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20006bc4 	.word	0x20006bc4
 80072b8:	20006bcc 	.word	0x20006bcc

080072bc <atoi>:
 80072bc:	220a      	movs	r2, #10
 80072be:	2100      	movs	r1, #0
 80072c0:	f000 b978 	b.w	80075b4 <strtol>

080072c4 <__errno>:
 80072c4:	4b01      	ldr	r3, [pc, #4]	; (80072cc <__errno+0x8>)
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20002010 	.word	0x20002010

080072d0 <__libc_init_array>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	4d0d      	ldr	r5, [pc, #52]	; (8007308 <__libc_init_array+0x38>)
 80072d4:	4c0d      	ldr	r4, [pc, #52]	; (800730c <__libc_init_array+0x3c>)
 80072d6:	1b64      	subs	r4, r4, r5
 80072d8:	10a4      	asrs	r4, r4, #2
 80072da:	2600      	movs	r6, #0
 80072dc:	42a6      	cmp	r6, r4
 80072de:	d109      	bne.n	80072f4 <__libc_init_array+0x24>
 80072e0:	4d0b      	ldr	r5, [pc, #44]	; (8007310 <__libc_init_array+0x40>)
 80072e2:	4c0c      	ldr	r4, [pc, #48]	; (8007314 <__libc_init_array+0x44>)
 80072e4:	f000 f97c 	bl	80075e0 <_init>
 80072e8:	1b64      	subs	r4, r4, r5
 80072ea:	10a4      	asrs	r4, r4, #2
 80072ec:	2600      	movs	r6, #0
 80072ee:	42a6      	cmp	r6, r4
 80072f0:	d105      	bne.n	80072fe <__libc_init_array+0x2e>
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f8:	4798      	blx	r3
 80072fa:	3601      	adds	r6, #1
 80072fc:	e7ee      	b.n	80072dc <__libc_init_array+0xc>
 80072fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007302:	4798      	blx	r3
 8007304:	3601      	adds	r6, #1
 8007306:	e7f2      	b.n	80072ee <__libc_init_array+0x1e>
 8007308:	080078c4 	.word	0x080078c4
 800730c:	080078c4 	.word	0x080078c4
 8007310:	080078c4 	.word	0x080078c4
 8007314:	080078c8 	.word	0x080078c8

08007318 <memcpy>:
 8007318:	440a      	add	r2, r1
 800731a:	4291      	cmp	r1, r2
 800731c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007320:	d100      	bne.n	8007324 <memcpy+0xc>
 8007322:	4770      	bx	lr
 8007324:	b510      	push	{r4, lr}
 8007326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800732e:	4291      	cmp	r1, r2
 8007330:	d1f9      	bne.n	8007326 <memcpy+0xe>
 8007332:	bd10      	pop	{r4, pc}

08007334 <memset>:
 8007334:	4402      	add	r2, r0
 8007336:	4603      	mov	r3, r0
 8007338:	4293      	cmp	r3, r2
 800733a:	d100      	bne.n	800733e <memset+0xa>
 800733c:	4770      	bx	lr
 800733e:	f803 1b01 	strb.w	r1, [r3], #1
 8007342:	e7f9      	b.n	8007338 <memset+0x4>

08007344 <_free_r>:
 8007344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007346:	2900      	cmp	r1, #0
 8007348:	d044      	beq.n	80073d4 <_free_r+0x90>
 800734a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734e:	9001      	str	r0, [sp, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f1a1 0404 	sub.w	r4, r1, #4
 8007356:	bfb8      	it	lt
 8007358:	18e4      	addlt	r4, r4, r3
 800735a:	f000 f935 	bl	80075c8 <__malloc_lock>
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <_free_r+0x94>)
 8007360:	9801      	ldr	r0, [sp, #4]
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	b933      	cbnz	r3, 8007374 <_free_r+0x30>
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	6014      	str	r4, [r2, #0]
 800736a:	b003      	add	sp, #12
 800736c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007370:	f000 b930 	b.w	80075d4 <__malloc_unlock>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d908      	bls.n	800738a <_free_r+0x46>
 8007378:	6825      	ldr	r5, [r4, #0]
 800737a:	1961      	adds	r1, r4, r5
 800737c:	428b      	cmp	r3, r1
 800737e:	bf01      	itttt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	1949      	addeq	r1, r1, r5
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	e7ed      	b.n	8007366 <_free_r+0x22>
 800738a:	461a      	mov	r2, r3
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	b10b      	cbz	r3, 8007394 <_free_r+0x50>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x46>
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	1855      	adds	r5, r2, r1
 8007398:	42a5      	cmp	r5, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x70>
 800739c:	6824      	ldr	r4, [r4, #0]
 800739e:	4421      	add	r1, r4
 80073a0:	1854      	adds	r4, r2, r1
 80073a2:	42a3      	cmp	r3, r4
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	d1e0      	bne.n	800736a <_free_r+0x26>
 80073a8:	681c      	ldr	r4, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	6053      	str	r3, [r2, #4]
 80073ae:	4421      	add	r1, r4
 80073b0:	6011      	str	r1, [r2, #0]
 80073b2:	e7da      	b.n	800736a <_free_r+0x26>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x78>
 80073b6:	230c      	movs	r3, #12
 80073b8:	6003      	str	r3, [r0, #0]
 80073ba:	e7d6      	b.n	800736a <_free_r+0x26>
 80073bc:	6825      	ldr	r5, [r4, #0]
 80073be:	1961      	adds	r1, r4, r5
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf04      	itt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	bf04      	itt	eq
 80073cc:	1949      	addeq	r1, r1, r5
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	6054      	str	r4, [r2, #4]
 80073d2:	e7ca      	b.n	800736a <_free_r+0x26>
 80073d4:	b003      	add	sp, #12
 80073d6:	bd30      	pop	{r4, r5, pc}
 80073d8:	20006be4 	.word	0x20006be4

080073dc <cleanup_glue>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	460c      	mov	r4, r1
 80073e0:	6809      	ldr	r1, [r1, #0]
 80073e2:	4605      	mov	r5, r0
 80073e4:	b109      	cbz	r1, 80073ea <cleanup_glue+0xe>
 80073e6:	f7ff fff9 	bl	80073dc <cleanup_glue>
 80073ea:	4621      	mov	r1, r4
 80073ec:	4628      	mov	r0, r5
 80073ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f2:	f7ff bfa7 	b.w	8007344 <_free_r>
	...

080073f8 <_reclaim_reent>:
 80073f8:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <_reclaim_reent+0xb4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4283      	cmp	r3, r0
 80073fe:	b570      	push	{r4, r5, r6, lr}
 8007400:	4604      	mov	r4, r0
 8007402:	d051      	beq.n	80074a8 <_reclaim_reent+0xb0>
 8007404:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007406:	b143      	cbz	r3, 800741a <_reclaim_reent+0x22>
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d14a      	bne.n	80074a4 <_reclaim_reent+0xac>
 800740e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	b111      	cbz	r1, 800741a <_reclaim_reent+0x22>
 8007414:	4620      	mov	r0, r4
 8007416:	f7ff ff95 	bl	8007344 <_free_r>
 800741a:	6961      	ldr	r1, [r4, #20]
 800741c:	b111      	cbz	r1, 8007424 <_reclaim_reent+0x2c>
 800741e:	4620      	mov	r0, r4
 8007420:	f7ff ff90 	bl	8007344 <_free_r>
 8007424:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007426:	b111      	cbz	r1, 800742e <_reclaim_reent+0x36>
 8007428:	4620      	mov	r0, r4
 800742a:	f7ff ff8b 	bl	8007344 <_free_r>
 800742e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007430:	b111      	cbz	r1, 8007438 <_reclaim_reent+0x40>
 8007432:	4620      	mov	r0, r4
 8007434:	f7ff ff86 	bl	8007344 <_free_r>
 8007438:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800743a:	b111      	cbz	r1, 8007442 <_reclaim_reent+0x4a>
 800743c:	4620      	mov	r0, r4
 800743e:	f7ff ff81 	bl	8007344 <_free_r>
 8007442:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007444:	b111      	cbz	r1, 800744c <_reclaim_reent+0x54>
 8007446:	4620      	mov	r0, r4
 8007448:	f7ff ff7c 	bl	8007344 <_free_r>
 800744c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800744e:	b111      	cbz	r1, 8007456 <_reclaim_reent+0x5e>
 8007450:	4620      	mov	r0, r4
 8007452:	f7ff ff77 	bl	8007344 <_free_r>
 8007456:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007458:	b111      	cbz	r1, 8007460 <_reclaim_reent+0x68>
 800745a:	4620      	mov	r0, r4
 800745c:	f7ff ff72 	bl	8007344 <_free_r>
 8007460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007462:	b111      	cbz	r1, 800746a <_reclaim_reent+0x72>
 8007464:	4620      	mov	r0, r4
 8007466:	f7ff ff6d 	bl	8007344 <_free_r>
 800746a:	69a3      	ldr	r3, [r4, #24]
 800746c:	b1e3      	cbz	r3, 80074a8 <_reclaim_reent+0xb0>
 800746e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007470:	4620      	mov	r0, r4
 8007472:	4798      	blx	r3
 8007474:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007476:	b1b9      	cbz	r1, 80074a8 <_reclaim_reent+0xb0>
 8007478:	4620      	mov	r0, r4
 800747a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800747e:	f7ff bfad 	b.w	80073dc <cleanup_glue>
 8007482:	5949      	ldr	r1, [r1, r5]
 8007484:	b941      	cbnz	r1, 8007498 <_reclaim_reent+0xa0>
 8007486:	3504      	adds	r5, #4
 8007488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800748a:	2d80      	cmp	r5, #128	; 0x80
 800748c:	68d9      	ldr	r1, [r3, #12]
 800748e:	d1f8      	bne.n	8007482 <_reclaim_reent+0x8a>
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff ff57 	bl	8007344 <_free_r>
 8007496:	e7ba      	b.n	800740e <_reclaim_reent+0x16>
 8007498:	680e      	ldr	r6, [r1, #0]
 800749a:	4620      	mov	r0, r4
 800749c:	f7ff ff52 	bl	8007344 <_free_r>
 80074a0:	4631      	mov	r1, r6
 80074a2:	e7ef      	b.n	8007484 <_reclaim_reent+0x8c>
 80074a4:	2500      	movs	r5, #0
 80074a6:	e7ef      	b.n	8007488 <_reclaim_reent+0x90>
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
 80074aa:	bf00      	nop
 80074ac:	20002010 	.word	0x20002010

080074b0 <_strtol_l.constprop.0>:
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b6:	d001      	beq.n	80074bc <_strtol_l.constprop.0+0xc>
 80074b8:	2b24      	cmp	r3, #36	; 0x24
 80074ba:	d906      	bls.n	80074ca <_strtol_l.constprop.0+0x1a>
 80074bc:	f7ff ff02 	bl	80072c4 <__errno>
 80074c0:	2316      	movs	r3, #22
 80074c2:	6003      	str	r3, [r0, #0]
 80074c4:	2000      	movs	r0, #0
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80075b0 <_strtol_l.constprop.0+0x100>
 80074ce:	460d      	mov	r5, r1
 80074d0:	462e      	mov	r6, r5
 80074d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80074da:	f017 0708 	ands.w	r7, r7, #8
 80074de:	d1f7      	bne.n	80074d0 <_strtol_l.constprop.0+0x20>
 80074e0:	2c2d      	cmp	r4, #45	; 0x2d
 80074e2:	d132      	bne.n	800754a <_strtol_l.constprop.0+0x9a>
 80074e4:	782c      	ldrb	r4, [r5, #0]
 80074e6:	2701      	movs	r7, #1
 80074e8:	1cb5      	adds	r5, r6, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d05b      	beq.n	80075a6 <_strtol_l.constprop.0+0xf6>
 80074ee:	2b10      	cmp	r3, #16
 80074f0:	d109      	bne.n	8007506 <_strtol_l.constprop.0+0x56>
 80074f2:	2c30      	cmp	r4, #48	; 0x30
 80074f4:	d107      	bne.n	8007506 <_strtol_l.constprop.0+0x56>
 80074f6:	782c      	ldrb	r4, [r5, #0]
 80074f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074fc:	2c58      	cmp	r4, #88	; 0x58
 80074fe:	d14d      	bne.n	800759c <_strtol_l.constprop.0+0xec>
 8007500:	786c      	ldrb	r4, [r5, #1]
 8007502:	2310      	movs	r3, #16
 8007504:	3502      	adds	r5, #2
 8007506:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800750a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800750e:	f04f 0c00 	mov.w	ip, #0
 8007512:	fbb8 f9f3 	udiv	r9, r8, r3
 8007516:	4666      	mov	r6, ip
 8007518:	fb03 8a19 	mls	sl, r3, r9, r8
 800751c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007520:	f1be 0f09 	cmp.w	lr, #9
 8007524:	d816      	bhi.n	8007554 <_strtol_l.constprop.0+0xa4>
 8007526:	4674      	mov	r4, lr
 8007528:	42a3      	cmp	r3, r4
 800752a:	dd24      	ble.n	8007576 <_strtol_l.constprop.0+0xc6>
 800752c:	f1bc 0f00 	cmp.w	ip, #0
 8007530:	db1e      	blt.n	8007570 <_strtol_l.constprop.0+0xc0>
 8007532:	45b1      	cmp	r9, r6
 8007534:	d31c      	bcc.n	8007570 <_strtol_l.constprop.0+0xc0>
 8007536:	d101      	bne.n	800753c <_strtol_l.constprop.0+0x8c>
 8007538:	45a2      	cmp	sl, r4
 800753a:	db19      	blt.n	8007570 <_strtol_l.constprop.0+0xc0>
 800753c:	fb06 4603 	mla	r6, r6, r3, r4
 8007540:	f04f 0c01 	mov.w	ip, #1
 8007544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007548:	e7e8      	b.n	800751c <_strtol_l.constprop.0+0x6c>
 800754a:	2c2b      	cmp	r4, #43	; 0x2b
 800754c:	bf04      	itt	eq
 800754e:	782c      	ldrbeq	r4, [r5, #0]
 8007550:	1cb5      	addeq	r5, r6, #2
 8007552:	e7ca      	b.n	80074ea <_strtol_l.constprop.0+0x3a>
 8007554:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007558:	f1be 0f19 	cmp.w	lr, #25
 800755c:	d801      	bhi.n	8007562 <_strtol_l.constprop.0+0xb2>
 800755e:	3c37      	subs	r4, #55	; 0x37
 8007560:	e7e2      	b.n	8007528 <_strtol_l.constprop.0+0x78>
 8007562:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007566:	f1be 0f19 	cmp.w	lr, #25
 800756a:	d804      	bhi.n	8007576 <_strtol_l.constprop.0+0xc6>
 800756c:	3c57      	subs	r4, #87	; 0x57
 800756e:	e7db      	b.n	8007528 <_strtol_l.constprop.0+0x78>
 8007570:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007574:	e7e6      	b.n	8007544 <_strtol_l.constprop.0+0x94>
 8007576:	f1bc 0f00 	cmp.w	ip, #0
 800757a:	da05      	bge.n	8007588 <_strtol_l.constprop.0+0xd8>
 800757c:	2322      	movs	r3, #34	; 0x22
 800757e:	6003      	str	r3, [r0, #0]
 8007580:	4646      	mov	r6, r8
 8007582:	b942      	cbnz	r2, 8007596 <_strtol_l.constprop.0+0xe6>
 8007584:	4630      	mov	r0, r6
 8007586:	e79e      	b.n	80074c6 <_strtol_l.constprop.0+0x16>
 8007588:	b107      	cbz	r7, 800758c <_strtol_l.constprop.0+0xdc>
 800758a:	4276      	negs	r6, r6
 800758c:	2a00      	cmp	r2, #0
 800758e:	d0f9      	beq.n	8007584 <_strtol_l.constprop.0+0xd4>
 8007590:	f1bc 0f00 	cmp.w	ip, #0
 8007594:	d000      	beq.n	8007598 <_strtol_l.constprop.0+0xe8>
 8007596:	1e69      	subs	r1, r5, #1
 8007598:	6011      	str	r1, [r2, #0]
 800759a:	e7f3      	b.n	8007584 <_strtol_l.constprop.0+0xd4>
 800759c:	2430      	movs	r4, #48	; 0x30
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1b1      	bne.n	8007506 <_strtol_l.constprop.0+0x56>
 80075a2:	2308      	movs	r3, #8
 80075a4:	e7af      	b.n	8007506 <_strtol_l.constprop.0+0x56>
 80075a6:	2c30      	cmp	r4, #48	; 0x30
 80075a8:	d0a5      	beq.n	80074f6 <_strtol_l.constprop.0+0x46>
 80075aa:	230a      	movs	r3, #10
 80075ac:	e7ab      	b.n	8007506 <_strtol_l.constprop.0+0x56>
 80075ae:	bf00      	nop
 80075b0:	080077b9 	.word	0x080077b9

080075b4 <strtol>:
 80075b4:	4613      	mov	r3, r2
 80075b6:	460a      	mov	r2, r1
 80075b8:	4601      	mov	r1, r0
 80075ba:	4802      	ldr	r0, [pc, #8]	; (80075c4 <strtol+0x10>)
 80075bc:	6800      	ldr	r0, [r0, #0]
 80075be:	f7ff bf77 	b.w	80074b0 <_strtol_l.constprop.0>
 80075c2:	bf00      	nop
 80075c4:	20002010 	.word	0x20002010

080075c8 <__malloc_lock>:
 80075c8:	4801      	ldr	r0, [pc, #4]	; (80075d0 <__malloc_lock+0x8>)
 80075ca:	f7fa bb26 	b.w	8001c1a <__retarget_lock_acquire_recursive>
 80075ce:	bf00      	nop
 80075d0:	200021c4 	.word	0x200021c4

080075d4 <__malloc_unlock>:
 80075d4:	4801      	ldr	r0, [pc, #4]	; (80075dc <__malloc_unlock+0x8>)
 80075d6:	f7fa bb34 	b.w	8001c42 <__retarget_lock_release_recursive>
 80075da:	bf00      	nop
 80075dc:	200021c4 	.word	0x200021c4

080075e0 <_init>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr

080075ec <_fini>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr
